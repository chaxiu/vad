// ignore_for_file: always_specify_types, unused_field
// ignore_for_file: camel_case_types
// ignore_for_file: non_constant_identifier_names

// AUTO GENERATED FILE, DO NOT EDIT.
//
// Generated by `package:ffigen`.
// ignore_for_file: type=lint
import 'dart:ffi' as ffi;

/// Bindings for ONNX Runtime C API v1.22.0.
///
/// Regenerate bindings with `flutter pub run ffigen --config ffigen.yaml`.
///
class OnnxRuntimeBindings {
  /// Holds the symbol lookup function.
  final ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
      _lookup;

  /// The symbols are looked up in [dynamicLibrary].
  OnnxRuntimeBindings(ffi.DynamicLibrary dynamicLibrary)
      : _lookup = dynamicLibrary.lookup;

  /// The symbols are looked up with [lookup].
  OnnxRuntimeBindings.fromLookup(
      ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
          lookup)
      : _lookup = lookup;

  /// \brief The Onnxruntime library's entry point to access the C API
  ///
  /// Call this to get the a pointer to an ::OrtApiBase
  ffi.Pointer<OrtApiBase> OrtGetApiBase() {
    return _OrtGetApiBase();
  }

  late final _OrtGetApiBasePtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<OrtApiBase> Function()>>(
          'OrtGetApiBase');
  late final _OrtGetApiBase =
      _OrtGetApiBasePtr.asFunction<ffi.Pointer<OrtApiBase> Function()>();

  OrtStatusPtr OrtSessionOptionsAppendExecutionProvider_CUDA(
    ffi.Pointer<OrtSessionOptions> options,
    int device_id,
  ) {
    return _OrtSessionOptionsAppendExecutionProvider_CUDA(
      options,
      device_id,
    );
  }

  late final _OrtSessionOptionsAppendExecutionProvider_CUDAPtr = _lookup<
      ffi.NativeFunction<
          OrtStatusPtr Function(ffi.Pointer<OrtSessionOptions>,
              ffi.Int)>>('OrtSessionOptionsAppendExecutionProvider_CUDA');
  late final _OrtSessionOptionsAppendExecutionProvider_CUDA =
      _OrtSessionOptionsAppendExecutionProvider_CUDAPtr.asFunction<
          OrtStatusPtr Function(ffi.Pointer<OrtSessionOptions>, int)>();

  OrtStatusPtr OrtSessionOptionsAppendExecutionProvider_ROCM(
    ffi.Pointer<OrtSessionOptions> options,
    int device_id,
  ) {
    return _OrtSessionOptionsAppendExecutionProvider_ROCM(
      options,
      device_id,
    );
  }

  late final _OrtSessionOptionsAppendExecutionProvider_ROCMPtr = _lookup<
      ffi.NativeFunction<
          OrtStatusPtr Function(ffi.Pointer<OrtSessionOptions>,
              ffi.Int)>>('OrtSessionOptionsAppendExecutionProvider_ROCM');
  late final _OrtSessionOptionsAppendExecutionProvider_ROCM =
      _OrtSessionOptionsAppendExecutionProvider_ROCMPtr.asFunction<
          OrtStatusPtr Function(ffi.Pointer<OrtSessionOptions>, int)>();

  OrtStatusPtr OrtSessionOptionsAppendExecutionProvider_MIGraphX(
    ffi.Pointer<OrtSessionOptions> options,
    int device_id,
  ) {
    return _OrtSessionOptionsAppendExecutionProvider_MIGraphX(
      options,
      device_id,
    );
  }

  late final _OrtSessionOptionsAppendExecutionProvider_MIGraphXPtr = _lookup<
      ffi.NativeFunction<
          OrtStatusPtr Function(ffi.Pointer<OrtSessionOptions>,
              ffi.Int)>>('OrtSessionOptionsAppendExecutionProvider_MIGraphX');
  late final _OrtSessionOptionsAppendExecutionProvider_MIGraphX =
      _OrtSessionOptionsAppendExecutionProvider_MIGraphXPtr.asFunction<
          OrtStatusPtr Function(ffi.Pointer<OrtSessionOptions>, int)>();

  OrtStatusPtr OrtSessionOptionsAppendExecutionProvider_Dnnl(
    ffi.Pointer<OrtSessionOptions> options,
    int use_arena,
  ) {
    return _OrtSessionOptionsAppendExecutionProvider_Dnnl(
      options,
      use_arena,
    );
  }

  late final _OrtSessionOptionsAppendExecutionProvider_DnnlPtr = _lookup<
      ffi.NativeFunction<
          OrtStatusPtr Function(ffi.Pointer<OrtSessionOptions>,
              ffi.Int)>>('OrtSessionOptionsAppendExecutionProvider_Dnnl');
  late final _OrtSessionOptionsAppendExecutionProvider_Dnnl =
      _OrtSessionOptionsAppendExecutionProvider_DnnlPtr.asFunction<
          OrtStatusPtr Function(ffi.Pointer<OrtSessionOptions>, int)>();

  OrtStatusPtr OrtSessionOptionsAppendExecutionProvider_Tensorrt(
    ffi.Pointer<OrtSessionOptions> options,
    int device_id,
  ) {
    return _OrtSessionOptionsAppendExecutionProvider_Tensorrt(
      options,
      device_id,
    );
  }

  late final _OrtSessionOptionsAppendExecutionProvider_TensorrtPtr = _lookup<
      ffi.NativeFunction<
          OrtStatusPtr Function(ffi.Pointer<OrtSessionOptions>,
              ffi.Int)>>('OrtSessionOptionsAppendExecutionProvider_Tensorrt');
  late final _OrtSessionOptionsAppendExecutionProvider_Tensorrt =
      _OrtSessionOptionsAppendExecutionProvider_TensorrtPtr.asFunction<
          OrtStatusPtr Function(ffi.Pointer<OrtSessionOptions>, int)>();
}

/// Copied from TensorProto::DataType
/// Currently, Ort doesn't support complex64, complex128
enum ONNXTensorElementDataType {
  ONNX_TENSOR_ELEMENT_DATA_TYPE_UNDEFINED(0),

  /// maps to c type float
  ONNX_TENSOR_ELEMENT_DATA_TYPE_FLOAT(1),

  /// maps to c type uint8_t
  ONNX_TENSOR_ELEMENT_DATA_TYPE_UINT8(2),

  /// maps to c type int8_t
  ONNX_TENSOR_ELEMENT_DATA_TYPE_INT8(3),

  /// maps to c type uint16_t
  ONNX_TENSOR_ELEMENT_DATA_TYPE_UINT16(4),

  /// maps to c type int16_t
  ONNX_TENSOR_ELEMENT_DATA_TYPE_INT16(5),

  /// maps to c type int32_t
  ONNX_TENSOR_ELEMENT_DATA_TYPE_INT32(6),

  /// maps to c type int64_t
  ONNX_TENSOR_ELEMENT_DATA_TYPE_INT64(7),

  /// maps to c++ type std::string
  ONNX_TENSOR_ELEMENT_DATA_TYPE_STRING(8),
  ONNX_TENSOR_ELEMENT_DATA_TYPE_BOOL(9),
  ONNX_TENSOR_ELEMENT_DATA_TYPE_FLOAT16(10),

  /// maps to c type double
  ONNX_TENSOR_ELEMENT_DATA_TYPE_DOUBLE(11),

  /// maps to c type uint32_t
  ONNX_TENSOR_ELEMENT_DATA_TYPE_UINT32(12),

  /// maps to c type uint64_t
  ONNX_TENSOR_ELEMENT_DATA_TYPE_UINT64(13),

  /// complex with float32 real and imaginary components
  ONNX_TENSOR_ELEMENT_DATA_TYPE_COMPLEX64(14),

  /// complex with float64 real and imaginary components
  ONNX_TENSOR_ELEMENT_DATA_TYPE_COMPLEX128(15),

  /// Non-IEEE floating-point format based on IEEE754 single-precision
  ONNX_TENSOR_ELEMENT_DATA_TYPE_BFLOAT16(16),

  /// Non-IEEE floating-point format based on IEEE754 single-precision
  ONNX_TENSOR_ELEMENT_DATA_TYPE_FLOAT8E4M3FN(17),

  /// Non-IEEE floating-point format based on IEEE754 single-precision
  ONNX_TENSOR_ELEMENT_DATA_TYPE_FLOAT8E4M3FNUZ(18),

  /// Non-IEEE floating-point format based on IEEE754 single-precision
  ONNX_TENSOR_ELEMENT_DATA_TYPE_FLOAT8E5M2(19),

  /// Non-IEEE floating-point format based on IEEE754 single-precision
  ONNX_TENSOR_ELEMENT_DATA_TYPE_FLOAT8E5M2FNUZ(20),

  /// maps to a pair of packed uint4 values (size == 1 byte)
  ONNX_TENSOR_ELEMENT_DATA_TYPE_UINT4(21),

  /// maps to a pair of packed int4 values (size == 1 byte)
  ONNX_TENSOR_ELEMENT_DATA_TYPE_INT4(22);

  final int value;
  const ONNXTensorElementDataType(this.value);

  static ONNXTensorElementDataType fromValue(int value) => switch (value) {
        0 => ONNX_TENSOR_ELEMENT_DATA_TYPE_UNDEFINED,
        1 => ONNX_TENSOR_ELEMENT_DATA_TYPE_FLOAT,
        2 => ONNX_TENSOR_ELEMENT_DATA_TYPE_UINT8,
        3 => ONNX_TENSOR_ELEMENT_DATA_TYPE_INT8,
        4 => ONNX_TENSOR_ELEMENT_DATA_TYPE_UINT16,
        5 => ONNX_TENSOR_ELEMENT_DATA_TYPE_INT16,
        6 => ONNX_TENSOR_ELEMENT_DATA_TYPE_INT32,
        7 => ONNX_TENSOR_ELEMENT_DATA_TYPE_INT64,
        8 => ONNX_TENSOR_ELEMENT_DATA_TYPE_STRING,
        9 => ONNX_TENSOR_ELEMENT_DATA_TYPE_BOOL,
        10 => ONNX_TENSOR_ELEMENT_DATA_TYPE_FLOAT16,
        11 => ONNX_TENSOR_ELEMENT_DATA_TYPE_DOUBLE,
        12 => ONNX_TENSOR_ELEMENT_DATA_TYPE_UINT32,
        13 => ONNX_TENSOR_ELEMENT_DATA_TYPE_UINT64,
        14 => ONNX_TENSOR_ELEMENT_DATA_TYPE_COMPLEX64,
        15 => ONNX_TENSOR_ELEMENT_DATA_TYPE_COMPLEX128,
        16 => ONNX_TENSOR_ELEMENT_DATA_TYPE_BFLOAT16,
        17 => ONNX_TENSOR_ELEMENT_DATA_TYPE_FLOAT8E4M3FN,
        18 => ONNX_TENSOR_ELEMENT_DATA_TYPE_FLOAT8E4M3FNUZ,
        19 => ONNX_TENSOR_ELEMENT_DATA_TYPE_FLOAT8E5M2,
        20 => ONNX_TENSOR_ELEMENT_DATA_TYPE_FLOAT8E5M2FNUZ,
        21 => ONNX_TENSOR_ELEMENT_DATA_TYPE_UINT4,
        22 => ONNX_TENSOR_ELEMENT_DATA_TYPE_INT4,
        _ => throw ArgumentError(
            'Unknown value for ONNXTensorElementDataType: $value'),
      };
}

/// Synced with onnx TypeProto oneof
enum ONNXType {
  ONNX_TYPE_UNKNOWN(0),
  ONNX_TYPE_TENSOR(1),
  ONNX_TYPE_SEQUENCE(2),
  ONNX_TYPE_MAP(3),
  ONNX_TYPE_OPAQUE(4),
  ONNX_TYPE_SPARSETENSOR(5),
  ONNX_TYPE_OPTIONAL(6);

  final int value;
  const ONNXType(this.value);

  static ONNXType fromValue(int value) => switch (value) {
        0 => ONNX_TYPE_UNKNOWN,
        1 => ONNX_TYPE_TENSOR,
        2 => ONNX_TYPE_SEQUENCE,
        3 => ONNX_TYPE_MAP,
        4 => ONNX_TYPE_OPAQUE,
        5 => ONNX_TYPE_SPARSETENSOR,
        6 => ONNX_TYPE_OPTIONAL,
        _ => throw ArgumentError('Unknown value for ONNXType: $value'),
      };
}

/// These types are synced with internal
/// SparseFormatFlags
enum OrtSparseFormat {
  ORT_SPARSE_UNDEFINED(0),
  ORT_SPARSE_COO(1),
  ORT_SPARSE_CSRC(2),
  ORT_SPARSE_BLOCK_SPARSE(4);

  final int value;
  const OrtSparseFormat(this.value);

  static OrtSparseFormat fromValue(int value) => switch (value) {
        0 => ORT_SPARSE_UNDEFINED,
        1 => ORT_SPARSE_COO,
        2 => ORT_SPARSE_CSRC,
        4 => ORT_SPARSE_BLOCK_SPARSE,
        _ => throw ArgumentError('Unknown value for OrtSparseFormat: $value'),
      };
}

/// Enum allows to query sparse tensor indices
enum OrtSparseIndicesFormat {
  ORT_SPARSE_COO_INDICES(0),
  ORT_SPARSE_CSR_INNER_INDICES(1),
  ORT_SPARSE_CSR_OUTER_INDICES(2),
  ORT_SPARSE_BLOCK_SPARSE_INDICES(3);

  final int value;
  const OrtSparseIndicesFormat(this.value);

  static OrtSparseIndicesFormat fromValue(int value) => switch (value) {
        0 => ORT_SPARSE_COO_INDICES,
        1 => ORT_SPARSE_CSR_INNER_INDICES,
        2 => ORT_SPARSE_CSR_OUTER_INDICES,
        3 => ORT_SPARSE_BLOCK_SPARSE_INDICES,
        _ => throw ArgumentError(
            'Unknown value for OrtSparseIndicesFormat: $value'),
      };
}

/// \brief Logging severity levels
///
/// In typical API usage, specifying a logging severity level specifies the minimum severity of log messages to show.
enum OrtLoggingLevel {
  /// < Verbose informational messages (least severe).
  ORT_LOGGING_LEVEL_VERBOSE(0),

  /// < Informational messages.
  ORT_LOGGING_LEVEL_INFO(1),

  /// < Warning messages.
  ORT_LOGGING_LEVEL_WARNING(2),

  /// < Error messages.
  ORT_LOGGING_LEVEL_ERROR(3),

  /// < Fatal error messages (most severe).
  ORT_LOGGING_LEVEL_FATAL(4);

  final int value;
  const OrtLoggingLevel(this.value);

  static OrtLoggingLevel fromValue(int value) => switch (value) {
        0 => ORT_LOGGING_LEVEL_VERBOSE,
        1 => ORT_LOGGING_LEVEL_INFO,
        2 => ORT_LOGGING_LEVEL_WARNING,
        3 => ORT_LOGGING_LEVEL_ERROR,
        4 => ORT_LOGGING_LEVEL_FATAL,
        _ => throw ArgumentError('Unknown value for OrtLoggingLevel: $value'),
      };
}

enum OrtErrorCode {
  ORT_OK(0),
  ORT_FAIL(1),
  ORT_INVALID_ARGUMENT(2),
  ORT_NO_SUCHFILE(3),
  ORT_NO_MODEL(4),
  ORT_ENGINE_ERROR(5),
  ORT_RUNTIME_EXCEPTION(6),
  ORT_INVALID_PROTOBUF(7),
  ORT_MODEL_LOADED(8),
  ORT_NOT_IMPLEMENTED(9),
  ORT_INVALID_GRAPH(10),
  ORT_EP_FAIL(11),
  ORT_MODEL_LOAD_CANCELED(12),
  ORT_MODEL_REQUIRES_COMPILATION(13);

  final int value;
  const OrtErrorCode(this.value);

  static OrtErrorCode fromValue(int value) => switch (value) {
        0 => ORT_OK,
        1 => ORT_FAIL,
        2 => ORT_INVALID_ARGUMENT,
        3 => ORT_NO_SUCHFILE,
        4 => ORT_NO_MODEL,
        5 => ORT_ENGINE_ERROR,
        6 => ORT_RUNTIME_EXCEPTION,
        7 => ORT_INVALID_PROTOBUF,
        8 => ORT_MODEL_LOADED,
        9 => ORT_NOT_IMPLEMENTED,
        10 => ORT_INVALID_GRAPH,
        11 => ORT_EP_FAIL,
        12 => ORT_MODEL_LOAD_CANCELED,
        13 => ORT_MODEL_REQUIRES_COMPILATION,
        _ => throw ArgumentError('Unknown value for OrtErrorCode: $value'),
      };
}

enum OrtOpAttrType {
  ORT_OP_ATTR_UNDEFINED(0),
  ORT_OP_ATTR_INT(1),
  ORT_OP_ATTR_INTS(2),
  ORT_OP_ATTR_FLOAT(3),
  ORT_OP_ATTR_FLOATS(4),
  ORT_OP_ATTR_STRING(5),
  ORT_OP_ATTR_STRINGS(6);

  final int value;
  const OrtOpAttrType(this.value);

  static OrtOpAttrType fromValue(int value) => switch (value) {
        0 => ORT_OP_ATTR_UNDEFINED,
        1 => ORT_OP_ATTR_INT,
        2 => ORT_OP_ATTR_INTS,
        3 => ORT_OP_ATTR_FLOAT,
        4 => ORT_OP_ATTR_FLOATS,
        5 => ORT_OP_ATTR_STRING,
        6 => ORT_OP_ATTR_STRINGS,
        _ => throw ArgumentError('Unknown value for OrtOpAttrType: $value'),
      };
}

final class OrtEnv extends ffi.Opaque {}

final class OrtStatus extends ffi.Opaque {}

final class OrtMemoryInfo extends ffi.Opaque {}

final class OrtIoBinding extends ffi.Opaque {}

final class OrtSession extends ffi.Opaque {}

final class OrtValue extends ffi.Opaque {}

final class OrtRunOptions extends ffi.Opaque {}

final class OrtTypeInfo extends ffi.Opaque {}

final class OrtTensorTypeAndShapeInfo extends ffi.Opaque {}

final class OrtMapTypeInfo extends ffi.Opaque {}

final class OrtSequenceTypeInfo extends ffi.Opaque {}

final class OrtOptionalTypeInfo extends ffi.Opaque {}

final class OrtSessionOptions extends ffi.Opaque {}

final class OrtCustomOpDomain extends ffi.Opaque {}

final class OrtModelMetadata extends ffi.Opaque {}

final class OrtThreadPoolParams extends ffi.Opaque {}

final class OrtThreadingOptions extends ffi.Opaque {}

final class OrtArenaCfg extends ffi.Opaque {}

final class OrtPrepackedWeightsContainer extends ffi.Opaque {}

final class OrtTensorRTProviderOptionsV2 extends ffi.Opaque {}

final class OrtNvTensorRtRtxProviderOptions extends ffi.Opaque {}

final class OrtCUDAProviderOptionsV2 extends ffi.Opaque {}

final class OrtCANNProviderOptions extends ffi.Opaque {}

final class OrtDnnlProviderOptions extends ffi.Opaque {}

final class OrtOp extends ffi.Opaque {}

final class OrtOpAttr extends ffi.Opaque {}

final class OrtLogger extends ffi.Opaque {}

final class OrtShapeInferContext extends ffi.Opaque {}

final class OrtLoraAdapter extends ffi.Opaque {}

final class OrtValueInfo extends ffi.Opaque {}

final class OrtNode extends ffi.Opaque {}

final class OrtGraph extends ffi.Opaque {}

final class OrtModel extends ffi.Opaque {}

final class OrtModelCompilationOptions extends ffi.Opaque {}

final class OrtHardwareDevice extends ffi.Opaque {}

final class OrtEpDevice extends ffi.Opaque {}

final class OrtKeyValuePairs extends ffi.Opaque {}

typedef OrtStatusPtr = ffi.Pointer<OrtStatus>;

/// \brief Memory allocation interface
///
/// Structure of function pointers that defines a memory allocator. This can be created and filled in by the user for custom allocators.
///
/// When an allocator is passed to any function, be sure that the allocator object is not destroyed until the last allocated object using it is freed.
final class OrtAllocator extends ffi.Struct {
  /// < Must be initialized to ORT_API_VERSION
  @ffi.Uint32()
  external int version;

  /// < Returns a pointer to an allocated block of `size` bytes
  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(
              ffi.Pointer<OrtAllocator> this_, ffi.Size size)>> Alloc;

  /// < Free a block of memory previously allocated with OrtAllocator::Alloc
  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<OrtAllocator> this_, ffi.Pointer<ffi.Void> p)>> Free;

  /// < Return a pointer to an ::OrtMemoryInfo that describes this allocator
  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Pointer<OrtMemoryInfo> Function(
              ffi.Pointer<OrtAllocator> this_)>> Info;

  /// < Returns a pointer to an allocated block of `size` bytes
  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(
              ffi.Pointer<OrtAllocator> this_, ffi.Size size)>> Reserve;
}

typedef OrtLoggingFunctionFunction = ffi.Void Function(
    ffi.Pointer<ffi.Void> param,
    ffi.UnsignedInt severity,
    ffi.Pointer<ffi.Char> category,
    ffi.Pointer<ffi.Char> logid,
    ffi.Pointer<ffi.Char> code_location,
    ffi.Pointer<ffi.Char> message);
typedef DartOrtLoggingFunctionFunction = void Function(
    ffi.Pointer<ffi.Void> param,
    OrtLoggingLevel severity,
    ffi.Pointer<ffi.Char> category,
    ffi.Pointer<ffi.Char> logid,
    ffi.Pointer<ffi.Char> code_location,
    ffi.Pointer<ffi.Char> message);
typedef OrtLoggingFunction
    = ffi.Pointer<ffi.NativeFunction<OrtLoggingFunctionFunction>>;

/// \brief Graph optimization level
///
/// Refer to https://www.onnxruntime.ai/docs/performance/graph-optimizations.html#graph-optimization-levels
/// for an in-depth understanding of the Graph Optimization Levels.
enum GraphOptimizationLevel {
  ORT_DISABLE_ALL(0),
  ORT_ENABLE_BASIC(1),
  ORT_ENABLE_EXTENDED(2),
  ORT_ENABLE_ALL(99);

  final int value;
  const GraphOptimizationLevel(this.value);

  static GraphOptimizationLevel fromValue(int value) => switch (value) {
        0 => ORT_DISABLE_ALL,
        1 => ORT_ENABLE_BASIC,
        2 => ORT_ENABLE_EXTENDED,
        99 => ORT_ENABLE_ALL,
        _ => throw ArgumentError(
            'Unknown value for GraphOptimizationLevel: $value'),
      };
}

enum ExecutionMode {
  ORT_SEQUENTIAL(0),
  ORT_PARALLEL(1);

  final int value;
  const ExecutionMode(this.value);

  static ExecutionMode fromValue(int value) => switch (value) {
        0 => ORT_SEQUENTIAL,
        1 => ORT_PARALLEL,
        _ => throw ArgumentError('Unknown value for ExecutionMode: $value'),
      };
}

/// \brief Language projection identifiers
/// /see OrtApi::SetLanguageProjection
enum OrtLanguageProjection {
  ORT_PROJECTION_C(0),
  ORT_PROJECTION_CPLUSPLUS(1),
  ORT_PROJECTION_CSHARP(2),
  ORT_PROJECTION_PYTHON(3),
  ORT_PROJECTION_JAVA(4),
  ORT_PROJECTION_WINML(5),
  ORT_PROJECTION_NODEJS(6);

  final int value;
  const OrtLanguageProjection(this.value);

  static OrtLanguageProjection fromValue(int value) => switch (value) {
        0 => ORT_PROJECTION_C,
        1 => ORT_PROJECTION_CPLUSPLUS,
        2 => ORT_PROJECTION_CSHARP,
        3 => ORT_PROJECTION_PYTHON,
        4 => ORT_PROJECTION_JAVA,
        5 => ORT_PROJECTION_WINML,
        6 => ORT_PROJECTION_NODEJS,
        _ => throw ArgumentError(
            'Unknown value for OrtLanguageProjection: $value'),
      };
}

final class OrtKernelInfo extends ffi.Opaque {}

final class OrtKernelContext extends ffi.Opaque {}

enum OrtAllocatorType {
  OrtInvalidAllocator(-1),
  OrtDeviceAllocator(0),
  OrtArenaAllocator(1);

  final int value;
  const OrtAllocatorType(this.value);

  static OrtAllocatorType fromValue(int value) => switch (value) {
        -1 => OrtInvalidAllocator,
        0 => OrtDeviceAllocator,
        1 => OrtArenaAllocator,
        _ => throw ArgumentError('Unknown value for OrtAllocatorType: $value'),
      };
}

/// \brief Memory types for allocated memory, execution provider specific types should be extended in each provider.
/// /
/// // Whenever this struct is updated, please also update the MakeKey function in onnxruntime / core / framework / execution_provider.cc
enum OrtMemType {
  /// < Any CPU memory used by non-CPU execution provider
  OrtMemTypeCPUInput(-2),

  /// < CPU accessible memory outputted by non-CPU execution provider, i.e. CUDA_PINNED
  OrtMemTypeCPUOutput(-1),

  /// < The default allocator for execution provider
  OrtMemTypeDefault(0);

  /// < Temporary CPU accessible memory allocated by non-CPU execution provider, i.e. CUDA_PINNED
  static const OrtMemTypeCPU = OrtMemTypeCPUOutput;

  final int value;
  const OrtMemType(this.value);

  static OrtMemType fromValue(int value) => switch (value) {
        -2 => OrtMemTypeCPUInput,
        -1 => OrtMemTypeCPUOutput,
        0 => OrtMemTypeDefault,
        _ => throw ArgumentError('Unknown value for OrtMemType: $value'),
      };

  @override
  String toString() {
    if (this == OrtMemTypeCPUOutput)
      return "OrtMemType.OrtMemTypeCPUOutput, OrtMemType.OrtMemTypeCPU";
    return super.toString();
  }
}

/// \brief Algorithm to use for cuDNN Convolution Op
enum OrtCudnnConvAlgoSearch {
  /// expensive exhaustive benchmarking using cudnnFindConvolutionForwardAlgorithmEx
  OrtCudnnConvAlgoSearchExhaustive(0),

  /// lightweight heuristic based search using cudnnGetConvolutionForwardAlgorithm_v7
  OrtCudnnConvAlgoSearchHeuristic(1),

  /// default algorithm using CUDNN_CONVOLUTION_FWD_ALGO_IMPLICIT_PRECOMP_GEMM
  OrtCudnnConvAlgoSearchDefault(2);

  final int value;
  const OrtCudnnConvAlgoSearch(this.value);

  static OrtCudnnConvAlgoSearch fromValue(int value) => switch (value) {
        0 => OrtCudnnConvAlgoSearchExhaustive,
        1 => OrtCudnnConvAlgoSearchHeuristic,
        2 => OrtCudnnConvAlgoSearchDefault,
        _ => throw ArgumentError(
            'Unknown value for OrtCudnnConvAlgoSearch: $value'),
      };
}

/// \brief CUDA Provider Options
///
/// \see OrtApi::SessionOptionsAppendExecutionProvider_CUDA
final class OrtCUDAProviderOptions extends ffi.Struct {
  /// \brief CUDA device Id
  /// Defaults to 0.
  @ffi.Int()
  external int device_id;

  /// \brief CUDA Convolution algorithm search configuration.
  /// See enum OrtCudnnConvAlgoSearch for more details.
  /// Defaults to OrtCudnnConvAlgoSearchExhaustive.
  @ffi.UnsignedInt()
  external int cudnn_conv_algo_searchAsInt;

  OrtCudnnConvAlgoSearch get cudnn_conv_algo_search =>
      OrtCudnnConvAlgoSearch.fromValue(cudnn_conv_algo_searchAsInt);

  /// \brief CUDA memory limit (To use all possible memory pass in maximum size_t)
  /// Defaults to SIZE_MAX.
  /// \note If a ::OrtArenaCfg has been applied, it will override this field
  @ffi.Size()
  external int gpu_mem_limit;

  /// \brief Strategy used to grow the memory arena
  /// 0 = kNextPowerOfTwo<br>
  /// 1 = kSameAsRequested<br>
  /// Defaults to 0.
  /// \note If a ::OrtArenaCfg has been applied, it will override this field
  @ffi.Int()
  external int arena_extend_strategy;

  /// \brief Flag indicating if copying needs to take place on the same stream as the compute stream in the CUDA EP
  /// 0 = Use separate streams for copying and compute.
  /// 1 = Use the same stream for copying and compute.
  /// Defaults to 1.
  /// WARNING: Setting this to 0 may result in data races for some models.
  /// Please see issue #4829 for more details.
  @ffi.Int()
  external int do_copy_in_default_stream;

  /// \brief Flag indicating if there is a user provided compute stream
  /// Defaults to 0.
  @ffi.Int()
  external int has_user_compute_stream;

  /// \brief User provided compute stream.
  /// If provided, please set `has_user_compute_stream` to 1.
  external ffi.Pointer<ffi.Void> user_compute_stream;

  /// \brief CUDA memory arena configuration parameters
  external ffi.Pointer<OrtArenaCfg> default_memory_arena_cfg;

  /// \brief Enable TunableOp for using.
  /// Set it to 1/0 to enable/disable TunableOp. Otherwise, it is disabled by default.
  /// This option can be overridden by environment variable ORT_CUDA_TUNABLE_OP_ENABLE.
  @ffi.Int()
  external int tunable_op_enable;

  /// \brief Enable TunableOp for tuning.
  /// Set it to 1/0 to enable/disable TunableOp tuning. Otherwise, it is disabled by default.
  /// This option can be overridden by environment variable ORT_CUDA_TUNABLE_OP_TUNING_ENABLE.
  @ffi.Int()
  external int tunable_op_tuning_enable;

  /// \brief Max tuning duration time limit for each instance of TunableOp.
  /// Defaults to 0 to disable the limit.
  @ffi.Int()
  external int tunable_op_max_tuning_duration_ms;
}

/// \brief ROCM Provider Options
///
/// \see OrtApi::SessionOptionsAppendExecutionProvider_ROCM
final class OrtROCMProviderOptions extends ffi.Struct {
  /// \brief ROCM device Id
  /// Defaults to 0.
  @ffi.Int()
  external int device_id;

  /// \brief ROCM MIOpen Convolution algorithm exaustive search option.
  /// Defaults to 0 (false).
  @ffi.Int()
  external int miopen_conv_exhaustive_search;

  /// \brief ROCM memory limit (To use all possible memory pass in maximum size_t)
  /// Defaults to SIZE_MAX.
  /// \note If a ::OrtArenaCfg has been applied, it will override this field
  @ffi.Size()
  external int gpu_mem_limit;

  /// \brief Strategy used to grow the memory arena
  /// 0 = kNextPowerOfTwo<br>
  /// 1 = kSameAsRequested<br>
  /// Defaults to 0.
  /// \note If a ::OrtArenaCfg has been applied, it will override this field
  @ffi.Int()
  external int arena_extend_strategy;

  /// \brief Flag indicating if copying needs to take place on the same stream as the compute stream in the ROCM EP
  /// 0 = Use separate streams for copying and compute.
  /// 1 = Use the same stream for copying and compute.
  /// Defaults to 1.
  /// WARNING: Setting this to 0 may result in data races for some models.
  /// Please see issue #4829 for more details.
  @ffi.Int()
  external int do_copy_in_default_stream;

  /// \brief Flag indicating if there is a user provided compute stream
  /// Defaults to 0.
  @ffi.Int()
  external int has_user_compute_stream;

  /// \brief User provided compute stream.
  /// If provided, please set `has_user_compute_stream` to 1.
  external ffi.Pointer<ffi.Void> user_compute_stream;

  /// \brief ROCM memory arena configuration parameters
  external ffi.Pointer<OrtArenaCfg> default_memory_arena_cfg;

  @ffi.Int()
  external int enable_hip_graph;

  /// \brief Enable TunableOp for using.
  /// Set it to 1/0 to enable/disable TunableOp. Otherwise, it is disabled by default.
  /// This option can be overridden by environment variable ORT_ROCM_TUNABLE_OP_ENABLE.
  @ffi.Int()
  external int tunable_op_enable;

  /// \brief Enable TunableOp for tuning.
  /// Set it to 1/0 to enable/disable TunableOp tuning. Otherwise, it is disabled by default.
  /// This option can be overridden by environment variable ORT_ROCM_TUNABLE_OP_TUNING_ENABLE.
  @ffi.Int()
  external int tunable_op_tuning_enable;

  /// \brief Max tuning duration time limit for each instance of TunableOp.
  /// Defaults to 0 to disable the limit.
  @ffi.Int()
  external int tunable_op_max_tuning_duration_ms;
}

/// \brief OpenVINO Provider Options
/// \brief This Struct is frozen since ORT 1.13.0. Its maintained part of Legacy API for compatibility.
/// \brief For latest OpenVINO Provider Options update to the ProviderOptions map.
/// \brief Latest OpenVINO Provider Options are listed in the
/// \htmlonly
/// <a href="https://onnxruntime.ai/docs/execution-providers/OpenVINO-ExecutionProvider.html#summary-of-options">onnxruntime document.</a>
/// \endhtmlonly
/// \see OrtApi::SessionOptionsAppendExecutionProvider()
final class OrtOpenVINOProviderOptions extends ffi.Struct {
  /// \brief Device type string
  ///
  /// Valid settings are one of: "CPU_FP32", "CPU_FP16", "GPU_FP32", "GPU_FP16"
  external ffi.Pointer<ffi.Char> device_type;

  /// < 0 = disabled, nonzero = enabled
  @ffi.UnsignedChar()
  external int enable_npu_fast_compile;

  external ffi.Pointer<ffi.Char> device_id;

  /// < 0 = Use default number of threads
  @ffi.Size()
  external int num_of_threads;

  /// path is set to empty by default
  external ffi.Pointer<ffi.Char> cache_dir;

  external ffi.Pointer<ffi.Void> context;

  /// < 0 = disabled, nonzero = enabled
  @ffi.UnsignedChar()
  external int enable_opencl_throttling;

  /// < 0 = disabled, nonzero = enabled
  @ffi.UnsignedChar()
  external int enable_dynamic_shapes;
}

/// \brief TensorRT Provider Options
///
/// \see OrtApi::SessionOptionsAppendExecutionProvider_TensorRT
final class OrtTensorRTProviderOptions extends ffi.Struct {
  /// < CUDA device id (0 = default device)
  @ffi.Int()
  external int device_id;

  /// indicator of user specified CUDA compute stream.
  @ffi.Int()
  external int has_user_compute_stream;

  /// user specified CUDA compute stream.
  external ffi.Pointer<ffi.Void> user_compute_stream;

  /// maximum iterations for TensorRT parser to get capability
  @ffi.Int()
  external int trt_max_partition_iterations;

  /// minimum size of TensorRT subgraphs
  @ffi.Int()
  external int trt_min_subgraph_size;

  /// maximum workspace size for TensorRT.
  @ffi.Size()
  external int trt_max_workspace_size;

  /// enable TensorRT FP16 precision. Default 0 = false, nonzero = true
  @ffi.Int()
  external int trt_fp16_enable;

  /// enable TensorRT INT8 precision. Default 0 = false, nonzero = true
  @ffi.Int()
  external int trt_int8_enable;

  /// TensorRT INT8 calibration table name.
  external ffi.Pointer<ffi.Char> trt_int8_calibration_table_name;

  /// use native TensorRT generated calibration table. Default 0 = false, nonzero = true
  @ffi.Int()
  external int trt_int8_use_native_calibration_table;

  /// enable DLA. Default 0 = false, nonzero = true
  @ffi.Int()
  external int trt_dla_enable;

  /// DLA core number. Default 0
  @ffi.Int()
  external int trt_dla_core;

  /// dump TRT subgraph. Default 0 = false, nonzero = true
  @ffi.Int()
  external int trt_dump_subgraphs;

  /// enable engine caching. Default 0 = false, nonzero = true
  @ffi.Int()
  external int trt_engine_cache_enable;

  /// specify engine cache path
  external ffi.Pointer<ffi.Char> trt_engine_cache_path;

  /// enable engine decryption. Default 0 = false, nonzero = true
  @ffi.Int()
  external int trt_engine_decryption_enable;

  /// specify engine decryption library path
  external ffi.Pointer<ffi.Char> trt_engine_decryption_lib_path;

  /// force building TensorRT engine sequentially. Default 0 = false, nonzero = true
  @ffi.Int()
  external int trt_force_sequential_engine_build;
}

final class OrtCustomHandleType extends ffi.Struct {
  @ffi.Char()
  external int __place_holder;
}

typedef OrtCustomThreadHandle = ffi.Pointer<OrtCustomHandleType>;
typedef OrtThreadWorkerFnFunction = ffi.Void Function(
    ffi.Pointer<ffi.Void> ort_worker_fn_param);
typedef DartOrtThreadWorkerFnFunction = void Function(
    ffi.Pointer<ffi.Void> ort_worker_fn_param);

/// \brief Thread work loop function
///
/// Onnxruntime will provide the working loop on custom thread creation
/// Argument is an onnxruntime built-in type which will be provided when thread pool calls OrtCustomCreateThreadFn
typedef OrtThreadWorkerFn
    = ffi.Pointer<ffi.NativeFunction<OrtThreadWorkerFnFunction>>;
typedef OrtCustomCreateThreadFnFunction = OrtCustomThreadHandle Function(
    ffi.Pointer<ffi.Void> ort_custom_thread_creation_options,
    OrtThreadWorkerFn ort_thread_worker_fn,
    ffi.Pointer<ffi.Void> ort_worker_fn_param);

/// \brief Ort custom thread creation function
///
/// The function should return a thread handle to be used in onnxruntime thread pools
/// Onnxruntime will throw exception on return value of nullptr or 0, indicating that the function failed to create a thread
typedef OrtCustomCreateThreadFn
    = ffi.Pointer<ffi.NativeFunction<OrtCustomCreateThreadFnFunction>>;
typedef OrtCustomJoinThreadFnFunction = ffi.Void Function(
    OrtCustomThreadHandle ort_custom_thread_handle);
typedef DartOrtCustomJoinThreadFnFunction = void Function(
    OrtCustomThreadHandle ort_custom_thread_handle);

/// \brief Custom thread join function
///
/// Onnxruntime thread pool destructor will call the function to join a custom thread.
/// Argument ort_custom_thread_handle is the value returned by OrtCustomCreateThreadFn
typedef OrtCustomJoinThreadFn
    = ffi.Pointer<ffi.NativeFunction<OrtCustomJoinThreadFnFunction>>;

/// \brief MIGraphX Provider Options
///
/// \see OrtApi::SessionOptionsAppendExecutionProvider_MIGraphX
final class OrtMIGraphXProviderOptions extends ffi.Struct {
  /// hip device id.
  @ffi.Int()
  external int device_id;

  /// MIGraphX FP16 precision. Default 0 = false, nonzero = true
  @ffi.Int()
  external int migraphx_fp16_enable;

  /// MIGraphX INT8 precision. Default 0 = false, nonzero = true
  @ffi.Int()
  external int migraphx_int8_enable;

  /// MIGraphx INT8 cal table. Default 0 = false, noznero = true
  @ffi.Int()
  external int migraphx_use_native_calibration_table;

  /// MIGraphx INT8 calibration table name
  external ffi.Pointer<ffi.Char> migraphx_int8_calibration_table_name;

  /// migraphx save compiled model. Default 0 = false, noznero = true
  @ffi.Int()
  external int migraphx_save_compiled_model;

  /// migraphx model path name
  external ffi.Pointer<ffi.Char> migraphx_save_model_path;

  /// migraphx int8 cal table. Default 0 = false, noznero = true
  @ffi.Int()
  external int migraphx_load_compiled_model;

  /// migraphx model path name
  external ffi.Pointer<ffi.Char> migraphx_load_model_path;

  /// migraphx tuned compile  Default = false
  @ffi.Bool()
  external bool migraphx_exhaustive_tune;
}

final class OrtTrainingApi extends ffi.Opaque {}

/// \brief This mimics OrtDevice type constants so they can be returned in the API
enum OrtMemoryInfoDeviceType {
  OrtMemoryInfoDeviceType_CPU(0),
  OrtMemoryInfoDeviceType_GPU(1),
  OrtMemoryInfoDeviceType_FPGA(2);

  final int value;
  const OrtMemoryInfoDeviceType(this.value);

  static OrtMemoryInfoDeviceType fromValue(int value) => switch (value) {
        0 => OrtMemoryInfoDeviceType_CPU,
        1 => OrtMemoryInfoDeviceType_GPU,
        2 => OrtMemoryInfoDeviceType_FPGA,
        _ => throw ArgumentError(
            'Unknown value for OrtMemoryInfoDeviceType: $value'),
      };
}

typedef RunAsyncCallbackFnFunction = ffi.Void Function(
    ffi.Pointer<ffi.Void> user_data,
    ffi.Pointer<ffi.Pointer<OrtValue>> outputs,
    ffi.Size num_outputs,
    OrtStatusPtr status);
typedef DartRunAsyncCallbackFnFunction = void Function(
    ffi.Pointer<ffi.Void> user_data,
    ffi.Pointer<ffi.Pointer<OrtValue>> outputs,
    int num_outputs,
    OrtStatusPtr status);

/// \brief Callback function for RunAsync
///
/// \param[in] user_data User specific data that passed back to the callback
/// \param[out] outputs On succeed, outputs host inference results, on error, the value will be nullptr
/// \param[out] num_outputs Number of outputs, on error, the value will be zero
/// \param[out] status On error, status will provide details
typedef RunAsyncCallbackFn
    = ffi.Pointer<ffi.NativeFunction<RunAsyncCallbackFnFunction>>;

/// \brief The OrtModelEditorApi struct provides functions to create or edit an ONNX model.
///
/// See onnxruntime/test/shared_lib/test_model_editor_api.cc for example usage.
///
/// \since Version 1.22.
final class OrtModelEditorApi extends ffi.Struct {
  external ffi.Pointer<
          ffi.NativeFunction<
              OrtStatusPtr Function(
                  ffi.Pointer<OrtTensorTypeAndShapeInfo> tensor_info,
                  ffi.Pointer<ffi.Pointer<OrtTypeInfo>> type_info)>>
      CreateTensorTypeInfo;

  external ffi.Pointer<
          ffi.NativeFunction<
              OrtStatusPtr Function(
                  ffi.Pointer<OrtTensorTypeAndShapeInfo> tensor_info,
                  ffi.Pointer<ffi.Pointer<OrtTypeInfo>> type_info)>>
      CreateSparseTensorTypeInfo;

  external ffi.Pointer<
          ffi.NativeFunction<
              OrtStatusPtr Function(
                  ffi.UnsignedInt map_key_type,
                  ffi.Pointer<OrtTypeInfo> map_value_type,
                  ffi.Pointer<ffi.Pointer<OrtTypeInfo>> type_info)>>
      CreateMapTypeInfo;

  external ffi.Pointer<
          ffi.NativeFunction<
              OrtStatusPtr Function(ffi.Pointer<OrtTypeInfo> sequence_type,
                  ffi.Pointer<ffi.Pointer<OrtTypeInfo>> type_info)>>
      CreateSequenceTypeInfo;

  external ffi.Pointer<
          ffi.NativeFunction<
              OrtStatusPtr Function(ffi.Pointer<OrtTypeInfo> contained_type,
                  ffi.Pointer<ffi.Pointer<OrtTypeInfo>> type_info)>>
      CreateOptionalTypeInfo;

  external ffi.Pointer<
          ffi.NativeFunction<
              OrtStatusPtr Function(
                  ffi.Pointer<ffi.Char> name,
                  ffi.Pointer<OrtTypeInfo> type_info,
                  ffi.Pointer<ffi.Pointer<OrtValueInfo>> value_info)>>
      CreateValueInfo;

  external ffi.Pointer<
      ffi.NativeFunction<
          OrtStatusPtr Function(
              ffi.Pointer<ffi.Char> operator_name,
              ffi.Pointer<ffi.Char> domain_name,
              ffi.Pointer<ffi.Char> node_name,
              ffi.Pointer<ffi.Pointer<ffi.Char>> input_names,
              ffi.Size input_names_len,
              ffi.Pointer<ffi.Pointer<ffi.Char>> output_names,
              ffi.Size output_names_len,
              ffi.Pointer<ffi.Pointer<OrtOpAttr>> attributes,
              ffi.Size attribs_len,
              ffi.Pointer<ffi.Pointer<OrtNode>> node)>> CreateNode;

  external ffi.Pointer<
          ffi.NativeFunction<
              OrtStatusPtr Function(ffi.Pointer<ffi.Pointer<OrtGraph>> graph)>>
      CreateGraph;

  external ffi.Pointer<
      ffi.NativeFunction<
          OrtStatusPtr Function(
              ffi.Pointer<OrtGraph> graph,
              ffi.Pointer<ffi.Pointer<OrtValueInfo>> inputs,
              ffi.Size inputs_len)>> SetGraphInputs;

  external ffi.Pointer<
      ffi.NativeFunction<
          OrtStatusPtr Function(
              ffi.Pointer<OrtGraph> graph,
              ffi.Pointer<ffi.Pointer<OrtValueInfo>> outputs,
              ffi.Size outputs_len)>> SetGraphOutputs;

  external ffi.Pointer<
      ffi.NativeFunction<
          OrtStatusPtr Function(
              ffi.Pointer<OrtGraph> graph,
              ffi.Pointer<ffi.Char> name,
              ffi.Pointer<OrtValue> tensor,
              ffi.Bool data_is_external)>> AddInitializerToGraph;

  external ffi.Pointer<
          ffi.NativeFunction<
              OrtStatusPtr Function(
                  ffi.Pointer<OrtGraph> graph, ffi.Pointer<OrtNode> node)>>
      AddNodeToGraph;

  external ffi.Pointer<
      ffi.NativeFunction<
          OrtStatusPtr Function(
              ffi.Pointer<ffi.Pointer<ffi.Char>> domain_names,
              ffi.Pointer<ffi.Int> opset_versions,
              ffi.Size opset_entries_len,
              ffi.Pointer<ffi.Pointer<OrtModel>> model)>> CreateModel;

  external ffi.Pointer<
          ffi.NativeFunction<
              OrtStatusPtr Function(
                  ffi.Pointer<OrtModel> model, ffi.Pointer<OrtGraph> graph)>>
      AddGraphToModel;

  external ffi.Pointer<
          ffi.NativeFunction<
              OrtStatusPtr Function(
                  ffi.Pointer<OrtEnv> env,
                  ffi.Pointer<OrtModel> model,
                  ffi.Pointer<OrtSessionOptions> options,
                  ffi.Pointer<ffi.Pointer<OrtSession>> out)>>
      CreateSessionFromModel;

  external ffi.Pointer<
          ffi.NativeFunction<
              OrtStatusPtr Function(
                  ffi.Pointer<OrtEnv> env,
                  ffi.Pointer<ffi.Char> model_path,
                  ffi.Pointer<OrtSessionOptions> options,
                  ffi.Pointer<ffi.Pointer<OrtSession>> out)>>
      CreateModelEditorSession;

  external ffi.Pointer<
          ffi.NativeFunction<
              OrtStatusPtr Function(
                  ffi.Pointer<OrtEnv> env,
                  ffi.Pointer<ffi.Void> model_data,
                  ffi.Size model_data_length,
                  ffi.Pointer<OrtSessionOptions> options,
                  ffi.Pointer<ffi.Pointer<OrtSession>> out)>>
      CreateModelEditorSessionFromArray;

  external ffi.Pointer<
      ffi.NativeFunction<
          OrtStatusPtr Function(
              ffi.Pointer<OrtSession> session,
              ffi.Pointer<ffi.Char> domain,
              ffi.Pointer<ffi.Int> opset)>> SessionGetOpsetForDomain;

  external ffi.Pointer<
      ffi.NativeFunction<
          OrtStatusPtr Function(ffi.Pointer<OrtSession> session,
              ffi.Pointer<OrtModel> model)>> ApplyModelToModelEditorSession;

  external ffi.Pointer<
      ffi.NativeFunction<
          OrtStatusPtr Function(
              ffi.Pointer<OrtSession> session,
              ffi.Pointer<OrtSessionOptions> options,
              ffi.Pointer<OrtPrepackedWeightsContainer>
                  prepacked_weights_container)>> FinalizeModelEditorSession;
}

/// \brief The OrtCompileApi struct provides functions to compile ONNX models.
///
/// Execution providers that support compilation fuse a subgraph into an EPContext node that wraps a provider-specific
/// binary representation of the subgraph.
/// For more details about the EPContext design, refer to:
/// \htmlonly
/// <a href="https://onnxruntime.ai/docs/execution-providers/EP-Context-Design.html">EPContext design document.</a>
/// \endhtmlonly
///
/// Example (error handling not shown):
/// OrtStatus* status = NULL;
/// OrtCompileApi* compile_api = ort_api->GetCompileApi();
/// OrtModelCompilationOptions* compile_options = NULL;
///
/// status = compile_api->CreateModelCompilationOptionsFromSessionOptions(env, session_options, &compile_options);
/// status = compile_api->ModelCompilationOptions_SetInputModelPath(compile_options, ORT_TSTR("model.onnx"));
/// status = compile_api->ModelCompilationOptions_SetOutputModelPath(compile_options, ORT_TSTR("model.compiled.onnx"));
/// status = compile_api->CompileModel(env, compile_options);
/// compile_api->ReleaseModelCompilationOptions(compile_options);
///
/// \since Version 1.22.
final class OrtCompileApi extends ffi.Struct {
  external ffi.Pointer<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<OrtModelCompilationOptions> input)>>
      ReleaseModelCompilationOptions;

  external ffi.Pointer<
          ffi.NativeFunction<
              OrtStatusPtr Function(
                  ffi.Pointer<OrtEnv> env,
                  ffi.Pointer<OrtSessionOptions> session_options,
                  ffi.Pointer<ffi.Pointer<OrtModelCompilationOptions>> out)>>
      CreateModelCompilationOptionsFromSessionOptions;

  external ffi.Pointer<
          ffi.NativeFunction<
              OrtStatusPtr Function(
                  ffi.Pointer<OrtModelCompilationOptions> model_compile_options,
                  ffi.Pointer<ffi.Char> input_model_path)>>
      ModelCompilationOptions_SetInputModelPath;

  external ffi.Pointer<
          ffi.NativeFunction<
              OrtStatusPtr Function(
                  ffi.Pointer<OrtModelCompilationOptions> model_compile_options,
                  ffi.Pointer<ffi.Void> input_model_data,
                  ffi.Size input_model_data_size)>>
      ModelCompilationOptions_SetInputModelFromBuffer;

  external ffi.Pointer<
          ffi.NativeFunction<
              OrtStatusPtr Function(
                  ffi.Pointer<OrtModelCompilationOptions> model_compile_options,
                  ffi.Pointer<ffi.Char> output_model_path)>>
      ModelCompilationOptions_SetOutputModelPath;

  external ffi.Pointer<
          ffi.NativeFunction<
              OrtStatusPtr Function(
                  ffi.Pointer<OrtModelCompilationOptions> model_compile_options,
                  ffi.Pointer<ffi.Char> external_initializers_file_path,
                  ffi.Size external_initializers_size_threshold)>>
      ModelCompilationOptions_SetOutputModelExternalInitializersFile;

  external ffi.Pointer<
          ffi.NativeFunction<
              OrtStatusPtr Function(
                  ffi.Pointer<OrtModelCompilationOptions> model_compile_options,
                  ffi.Pointer<OrtAllocator> allocator,
                  ffi.Pointer<ffi.Pointer<ffi.Void>> output_model_buffer_ptr,
                  ffi.Pointer<ffi.Size> output_model_buffer_size_ptr)>>
      ModelCompilationOptions_SetOutputModelBuffer;

  external ffi.Pointer<
          ffi.NativeFunction<
              OrtStatusPtr Function(
                  ffi.Pointer<OrtModelCompilationOptions> model_compile_options,
                  ffi.Bool embed_ep_context_in_model)>>
      ModelCompilationOptions_SetEpContextEmbedMode;

  external ffi.Pointer<
          ffi.NativeFunction<
              OrtStatusPtr Function(ffi.Pointer<OrtEnv> env,
                  ffi.Pointer<OrtModelCompilationOptions> model_options)>>
      CompileModel;
}

/// \brief These are the default EP selection policies used by ORT when doing automatic EP selection.
enum OrtExecutionProviderDevicePolicy {
  OrtExecutionProviderDevicePolicy_DEFAULT(0),
  OrtExecutionProviderDevicePolicy_PREFER_CPU(1),
  OrtExecutionProviderDevicePolicy_PREFER_NPU(2),
  OrtExecutionProviderDevicePolicy_PREFER_GPU(3),
  OrtExecutionProviderDevicePolicy_MAX_PERFORMANCE(4),
  OrtExecutionProviderDevicePolicy_MAX_EFFICIENCY(5),
  OrtExecutionProviderDevicePolicy_MIN_OVERALL_POWER(6);

  final int value;
  const OrtExecutionProviderDevicePolicy(this.value);

  static OrtExecutionProviderDevicePolicy fromValue(int value) =>
      switch (value) {
        0 => OrtExecutionProviderDevicePolicy_DEFAULT,
        1 => OrtExecutionProviderDevicePolicy_PREFER_CPU,
        2 => OrtExecutionProviderDevicePolicy_PREFER_NPU,
        3 => OrtExecutionProviderDevicePolicy_PREFER_GPU,
        4 => OrtExecutionProviderDevicePolicy_MAX_PERFORMANCE,
        5 => OrtExecutionProviderDevicePolicy_MAX_EFFICIENCY,
        6 => OrtExecutionProviderDevicePolicy_MIN_OVERALL_POWER,
        _ => throw ArgumentError(
            'Unknown value for OrtExecutionProviderDevicePolicy: $value'),
      };
}

typedef EpSelectionDelegateFunction = ffi.Pointer<OrtStatus> Function(
    ffi.Pointer<ffi.Pointer<OrtEpDevice>> ep_devices,
    ffi.Size num_devices,
    ffi.Pointer<OrtKeyValuePairs> model_metadata,
    ffi.Pointer<OrtKeyValuePairs> runtime_metadata,
    ffi.Pointer<ffi.Pointer<OrtEpDevice>> selected,
    ffi.Size max_selected,
    ffi.Pointer<ffi.Size> num_selected,
    ffi.Pointer<ffi.Void> state);
typedef DartEpSelectionDelegateFunction = ffi.Pointer<OrtStatus> Function(
    ffi.Pointer<ffi.Pointer<OrtEpDevice>> ep_devices,
    int num_devices,
    ffi.Pointer<OrtKeyValuePairs> model_metadata,
    ffi.Pointer<OrtKeyValuePairs> runtime_metadata,
    ffi.Pointer<ffi.Pointer<OrtEpDevice>> selected,
    int max_selected,
    ffi.Pointer<ffi.Size> num_selected,
    ffi.Pointer<ffi.Void> state);

/// \brief Delegate to allow providing custom OrtEpDevice selection logic
///
/// This delegate is called by the EP selection code to allow the user to provide custom device selection logic.
/// The user can use this to select OrtEpDevice instances from the list of available devices.
///
/// \param ep_devices The list of available devices.
/// \param num_devices The number of available devices.
/// \param model_metadata The model metadata.
/// \param runtime_metadata The runtime metadata. May be nullptr.
/// \param selected Pre-allocated array to populate with selected OrtEpDevice pointers from ep_devices.
/// \param max_ep_devices The maximum number of devices that can be selected in the pre-allocated array.
/// Currently the maximum is 8.
/// \param num_ep_devices The number of selected devices.
/// \param state Opaque pointer. Required to use the delegate from other languages like C# and python.
///
/// \return OrtStatus* Selection status. Return nullptr on success.
/// Use CreateStatus to provide error info. Use ORT_FAIL as the error code.
/// ORT will release the OrtStatus* if not null.
typedef EpSelectionDelegate
    = ffi.Pointer<ffi.NativeFunction<EpSelectionDelegateFunction>>;

enum OrtHardwareDeviceType {
  OrtHardwareDeviceType_CPU(0),
  OrtHardwareDeviceType_GPU(1),
  OrtHardwareDeviceType_NPU(2);

  final int value;
  const OrtHardwareDeviceType(this.value);

  static OrtHardwareDeviceType fromValue(int value) => switch (value) {
        0 => OrtHardwareDeviceType_CPU,
        1 => OrtHardwareDeviceType_GPU,
        2 => OrtHardwareDeviceType_NPU,
        _ => throw ArgumentError(
            'Unknown value for OrtHardwareDeviceType: $value'),
      };
}

/// \brief The OrtEp struct provides functions to implement for an execution provider.
/// \since Version 1.22.
final class OrtEp extends ffi.Struct {
  /// \brief The ONNX Runtime version the execution provider was compiled with.
  ///
  /// Implementation should set to ORT_API_VERSION.
  /// ORT will use this to ensure it does not call functions that were not available when the library was compiled.
  ///
  /// \since Version 1.22.
  @ffi.Uint32()
  external int ort_version_supported;

  /// \brief Get the execution provider name.
  ///
  /// \param[in] this_ptr The OrtEp instance.
  /// \return The execution provider name.
  ///
  /// \note Returned string is owned by ORT and valid until UnregisterExecutionProviderLibrary is called.
  ///
  /// \since Version 1.22.
  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Pointer<OrtEp> this_ptr)>> GetName;
}

/// \brief The OrtEpFactory provides functions to create and manage execution providers.
/// \since Version 1.22.
final class OrtEpFactory extends ffi.Struct {
  /// \brief The ONNX Runtime version the execution provider was compiled with.
  ///
  /// Implementation should set to ORT_API_VERSION.
  /// ORT will use this to ensure it does not call functions that were not available when the library was compiled.
  ///
  /// \since Version 1.22.
  @ffi.Uint32()
  external int ort_version_supported;

  /// \brief Get the name the of the execution provider that the factory creates.
  ///
  /// \param[in] this_ptr The OrtEpFactory instance.
  /// \return The name of the execution provider the factory creates.
  ///
  /// \since Version 1.22.
  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<OrtEpFactory> this_ptr)>> GetName;

  /// return EP vendor
  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<OrtEpFactory> this_ptr)>> GetVendor;

  /// \brief Get information from the execution provider if it supports the OrtHardwareDevice.
  ///
  /// \param[in] this_ptr The OrtEpFactory instance.
  /// Non-const as the factory is passed through to the CreateEp call via the OrtEpDevice.
  /// \param[in] devices The OrtHardwareDevice instances that are available.
  /// \param[in] num_devices The number of OrtHardwareDevice instances.
  /// \param[out] ep_devices OrtEpDevice instances for each OrtHardwareDevice that the EP can use.
  /// The implementation should call OrtEpApi::CreateEpDevice to create, and add the OrtEpDevice
  /// instances to this pre-allocated array. ORT will take ownership of the values returned.
  /// i.e. usage is `ep_devices[0] = <ptr to OrtEpDevice created with OrtEpApi::CreateEpDevice>;`
  /// \param[in] max_ep_devices The maximum number of OrtEpDevices that can be added to ep_devices.
  /// Current default is 8. This can be increased if needed.
  /// \param[out] num_ep_devices The number of EP devices added to ep_devices.
  /// \return true if the factory can create an execution provider that uses `device`.
  ///
  /// \note ORT will take ownership or ep_metadata and/or ep_options if they are not null.
  ///
  /// \since Version 1.22.
  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Pointer<OrtStatus> Function(
              ffi.Pointer<OrtEpFactory> this_ptr,
              ffi.Pointer<ffi.Pointer<OrtHardwareDevice>> devices,
              ffi.Size num_devices,
              ffi.Pointer<ffi.Pointer<OrtEpDevice>> ep_devices,
              ffi.Size max_ep_devices,
              ffi.Pointer<ffi.Size> num_ep_devices)>> GetSupportedDevices;

  /// \brief Function to create an OrtEp instance for use in a Session.
  ///
  /// ORT will call ReleaseEp to release the instance when it is no longer needed.
  ///
  /// \param[in] this_ptr The OrtEpFactory instance.
  /// \param[in] devices The OrtHardwareDevice instances that the execution provider was selected to use.
  /// \param[in] ep_metadata_pairs Execution provider metadata that was provided to OrtEpApi::CreateEpDevice, for each
  /// device.
  /// \param[in] num_devices The number of devices the execution provider was selected for.
  /// \param[in] session_options The OrtSessionOptions instance that contains the configuration options for the
  /// session. This will include ep_options from GetSupportedDevices as well as any
  /// user provided overrides.
  /// Execution provider options will have been added with a prefix of 'ep.<ep name>.'.
  /// The OrtSessionOptions instance will NOT be valid after this call and should not be
  /// stored for later use.
  /// \param[in] logger The OrtLogger instance for the session that the execution provider should use for logging.
  /// \param[out] ep The OrtEp instance created by the factory.
  ///
  /// \snippet{doc} snippets.dox OrtStatus Return Value
  ///
  /// \since Version <coming soon>. This is a placeholder.
  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Pointer<OrtStatus> Function(
              ffi.Pointer<OrtEpFactory> this_ptr,
              ffi.Pointer<ffi.Pointer<OrtHardwareDevice>> devices,
              ffi.Pointer<ffi.Pointer<OrtKeyValuePairs>> ep_metadata_pairs,
              ffi.Size num_devices,
              ffi.Pointer<OrtSessionOptions> session_options,
              ffi.Pointer<OrtLogger> logger,
              ffi.Pointer<ffi.Pointer<OrtEp>> ep)>> CreateEp;

  /// \brief Release the OrtEp instance.
  ///
  /// \param[in] this_ptr The OrtEpFactory instance.
  /// \param[in] ep The OrtEp instance to release.
  ///
  /// \since Version <coming soon>. This is a placeholder.
  external ffi.Pointer<
          ffi.NativeFunction<
              ffi.Void Function(
                  ffi.Pointer<OrtEpFactory> this_ptr, ffi.Pointer<OrtEp> ep)>>
      ReleaseEp;
}

final class OrtEpApi extends ffi.Struct {
  external ffi.Pointer<
      ffi.NativeFunction<
          OrtStatusPtr Function(
              ffi.Pointer<OrtEpFactory> ep_factory,
              ffi.Pointer<OrtHardwareDevice> hardware_device,
              ffi.Pointer<OrtKeyValuePairs> ep_metadata,
              ffi.Pointer<OrtKeyValuePairs> ep_options,
              ffi.Pointer<ffi.Pointer<OrtEpDevice>> ep_device)>> CreateEpDevice;

  external ffi.Pointer<
          ffi.NativeFunction<ffi.Void Function(ffi.Pointer<OrtEpDevice> input)>>
      ReleaseEpDevice;
}

/// \brief The C API
///
/// All C API functions are defined inside this structure as pointers to functions.
/// Call OrtApiBase::GetApi to get a pointer to it
///
/// \nosubgrouping
final class OrtApi extends ffi.Struct {
  /// \brief Create an OrtStatus from a null terminated string
  ///
  /// \param[in] code
  /// \param[in] msg A null-terminated string. Its contents will be copied.
  /// \return A new OrtStatus object, must be destroyed with OrtApi::ReleaseStatus
  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Pointer<OrtStatus> Function(
              ffi.UnsignedInt code, ffi.Pointer<ffi.Char> msg)>> CreateStatus;

  /// \brief Get OrtErrorCode from OrtStatus
  ///
  /// \param[in] status
  /// \return OrtErrorCode that \p status was created with
  external ffi.Pointer<
          ffi.NativeFunction<
              ffi.UnsignedInt Function(ffi.Pointer<OrtStatus> status)>>
      GetErrorCode;

  /// \brief Get error string from OrtStatus
  ///
  /// \param[in] status
  /// \return The error message inside the `status`. Do not free the returned value.
  external ffi.Pointer<
          ffi.NativeFunction<
              ffi.Pointer<ffi.Char> Function(ffi.Pointer<OrtStatus> status)>>
      GetErrorMessage;

  external ffi.Pointer<
      ffi.NativeFunction<
          OrtStatusPtr Function(
              ffi.UnsignedInt log_severity_level,
              ffi.Pointer<ffi.Char> logid,
              ffi.Pointer<ffi.Pointer<OrtEnv>> out)>> CreateEnv;

  external ffi.Pointer<
      ffi.NativeFunction<
          OrtStatusPtr Function(
              OrtLoggingFunction logging_function,
              ffi.Pointer<ffi.Void> logger_param,
              ffi.UnsignedInt log_severity_level,
              ffi.Pointer<ffi.Char> logid,
              ffi.Pointer<ffi.Pointer<OrtEnv>> out)>> CreateEnvWithCustomLogger;

  external ffi.Pointer<
          ffi.NativeFunction<OrtStatusPtr Function(ffi.Pointer<OrtEnv> env)>>
      EnableTelemetryEvents;

  external ffi.Pointer<
          ffi.NativeFunction<OrtStatusPtr Function(ffi.Pointer<OrtEnv> env)>>
      DisableTelemetryEvents;

  external ffi.Pointer<
      ffi.NativeFunction<
          OrtStatusPtr Function(
              ffi.Pointer<OrtEnv> env,
              ffi.Pointer<ffi.Char> model_path,
              ffi.Pointer<OrtSessionOptions> options,
              ffi.Pointer<ffi.Pointer<OrtSession>> out)>> CreateSession;

  external ffi.Pointer<
          ffi.NativeFunction<
              OrtStatusPtr Function(
                  ffi.Pointer<OrtEnv> env,
                  ffi.Pointer<ffi.Void> model_data,
                  ffi.Size model_data_length,
                  ffi.Pointer<OrtSessionOptions> options,
                  ffi.Pointer<ffi.Pointer<OrtSession>> out)>>
      CreateSessionFromArray;

  external ffi.Pointer<
      ffi.NativeFunction<
          OrtStatusPtr Function(
              ffi.Pointer<OrtSession> session,
              ffi.Pointer<OrtRunOptions> run_options,
              ffi.Pointer<ffi.Pointer<ffi.Char>> input_names,
              ffi.Pointer<ffi.Pointer<OrtValue>> inputs,
              ffi.Size input_len,
              ffi.Pointer<ffi.Pointer<ffi.Char>> output_names,
              ffi.Size output_names_len,
              ffi.Pointer<ffi.Pointer<OrtValue>> outputs)>> Run;

  external ffi.Pointer<
          ffi.NativeFunction<
              OrtStatusPtr Function(
                  ffi.Pointer<ffi.Pointer<OrtSessionOptions>> options)>>
      CreateSessionOptions;

  external ffi.Pointer<
          ffi.NativeFunction<
              OrtStatusPtr Function(ffi.Pointer<OrtSessionOptions> options,
                  ffi.Pointer<ffi.Char> optimized_model_filepath)>>
      SetOptimizedModelFilePath;

  external ffi.Pointer<
          ffi.NativeFunction<
              OrtStatusPtr Function(ffi.Pointer<OrtSessionOptions> in_options,
                  ffi.Pointer<ffi.Pointer<OrtSessionOptions>> out_options)>>
      CloneSessionOptions;

  external ffi.Pointer<
      ffi.NativeFunction<
          OrtStatusPtr Function(ffi.Pointer<OrtSessionOptions> options,
              ffi.UnsignedInt execution_mode)>> SetSessionExecutionMode;

  external ffi.Pointer<
      ffi.NativeFunction<
          OrtStatusPtr Function(ffi.Pointer<OrtSessionOptions> options,
              ffi.Pointer<ffi.Char> profile_file_prefix)>> EnableProfiling;

  external ffi.Pointer<
          ffi.NativeFunction<
              OrtStatusPtr Function(ffi.Pointer<OrtSessionOptions> options)>>
      DisableProfiling;

  external ffi.Pointer<
          ffi.NativeFunction<
              OrtStatusPtr Function(ffi.Pointer<OrtSessionOptions> options)>>
      EnableMemPattern;

  external ffi.Pointer<
          ffi.NativeFunction<
              OrtStatusPtr Function(ffi.Pointer<OrtSessionOptions> options)>>
      DisableMemPattern;

  external ffi.Pointer<
          ffi.NativeFunction<
              OrtStatusPtr Function(ffi.Pointer<OrtSessionOptions> options)>>
      EnableCpuMemArena;

  external ffi.Pointer<
          ffi.NativeFunction<
              OrtStatusPtr Function(ffi.Pointer<OrtSessionOptions> options)>>
      DisableCpuMemArena;

  external ffi.Pointer<
      ffi.NativeFunction<
          OrtStatusPtr Function(ffi.Pointer<OrtSessionOptions> options,
              ffi.Pointer<ffi.Char> logid)>> SetSessionLogId;

  external ffi.Pointer<
          ffi.NativeFunction<
              OrtStatusPtr Function(ffi.Pointer<OrtSessionOptions> options,
                  ffi.Int session_log_verbosity_level)>>
      SetSessionLogVerbosityLevel;

  external ffi.Pointer<
      ffi.NativeFunction<
          OrtStatusPtr Function(ffi.Pointer<OrtSessionOptions> options,
              ffi.Int session_log_severity_level)>> SetSessionLogSeverityLevel;

  external ffi.Pointer<
          ffi.NativeFunction<
              OrtStatusPtr Function(ffi.Pointer<OrtSessionOptions> options,
                  ffi.UnsignedInt graph_optimization_level)>>
      SetSessionGraphOptimizationLevel;

  external ffi.Pointer<
      ffi.NativeFunction<
          OrtStatusPtr Function(ffi.Pointer<OrtSessionOptions> options,
              ffi.Int intra_op_num_threads)>> SetIntraOpNumThreads;

  external ffi.Pointer<
      ffi.NativeFunction<
          OrtStatusPtr Function(ffi.Pointer<OrtSessionOptions> options,
              ffi.Int inter_op_num_threads)>> SetInterOpNumThreads;

  external ffi.Pointer<
          ffi.NativeFunction<
              OrtStatusPtr Function(ffi.Pointer<ffi.Char> domain,
                  ffi.Pointer<ffi.Pointer<OrtCustomOpDomain>> out)>>
      CreateCustomOpDomain;

  external ffi.Pointer<
      ffi.NativeFunction<
          OrtStatusPtr Function(ffi.Pointer<OrtCustomOpDomain> custom_op_domain,
              ffi.Pointer<OrtCustomOp> op)>> CustomOpDomain_Add;

  external ffi.Pointer<
          ffi.NativeFunction<
              OrtStatusPtr Function(ffi.Pointer<OrtSessionOptions> options,
                  ffi.Pointer<OrtCustomOpDomain> custom_op_domain)>>
      AddCustomOpDomain;

  external ffi.Pointer<
          ffi.NativeFunction<
              OrtStatusPtr Function(
                  ffi.Pointer<OrtSessionOptions> options,
                  ffi.Pointer<ffi.Char> library_path,
                  ffi.Pointer<ffi.Pointer<ffi.Void>> library_handle)>>
      RegisterCustomOpsLibrary;

  external ffi.Pointer<
          ffi.NativeFunction<
              OrtStatusPtr Function(
                  ffi.Pointer<OrtSession> session, ffi.Pointer<ffi.Size> out)>>
      SessionGetInputCount;

  external ffi.Pointer<
          ffi.NativeFunction<
              OrtStatusPtr Function(
                  ffi.Pointer<OrtSession> session, ffi.Pointer<ffi.Size> out)>>
      SessionGetOutputCount;

  external ffi.Pointer<
          ffi.NativeFunction<
              OrtStatusPtr Function(
                  ffi.Pointer<OrtSession> session, ffi.Pointer<ffi.Size> out)>>
      SessionGetOverridableInitializerCount;

  external ffi.Pointer<
          ffi.NativeFunction<
              OrtStatusPtr Function(
                  ffi.Pointer<OrtSession> session,
                  ffi.Size index,
                  ffi.Pointer<ffi.Pointer<OrtTypeInfo>> type_info)>>
      SessionGetInputTypeInfo;

  external ffi.Pointer<
          ffi.NativeFunction<
              OrtStatusPtr Function(
                  ffi.Pointer<OrtSession> session,
                  ffi.Size index,
                  ffi.Pointer<ffi.Pointer<OrtTypeInfo>> type_info)>>
      SessionGetOutputTypeInfo;

  external ffi.Pointer<
          ffi.NativeFunction<
              OrtStatusPtr Function(
                  ffi.Pointer<OrtSession> session,
                  ffi.Size index,
                  ffi.Pointer<ffi.Pointer<OrtTypeInfo>> type_info)>>
      SessionGetOverridableInitializerTypeInfo;

  external ffi.Pointer<
      ffi.NativeFunction<
          OrtStatusPtr Function(
              ffi.Pointer<OrtSession> session,
              ffi.Size index,
              ffi.Pointer<OrtAllocator> allocator,
              ffi.Pointer<ffi.Pointer<ffi.Char>> value)>> SessionGetInputName;

  external ffi.Pointer<
      ffi.NativeFunction<
          OrtStatusPtr Function(
              ffi.Pointer<OrtSession> session,
              ffi.Size index,
              ffi.Pointer<OrtAllocator> allocator,
              ffi.Pointer<ffi.Pointer<ffi.Char>> value)>> SessionGetOutputName;

  external ffi.Pointer<
          ffi.NativeFunction<
              OrtStatusPtr Function(
                  ffi.Pointer<OrtSession> session,
                  ffi.Size index,
                  ffi.Pointer<OrtAllocator> allocator,
                  ffi.Pointer<ffi.Pointer<ffi.Char>> value)>>
      SessionGetOverridableInitializerName;

  external ffi.Pointer<
      ffi.NativeFunction<
          OrtStatusPtr Function(
              ffi.Pointer<ffi.Pointer<OrtRunOptions>> out)>> CreateRunOptions;

  external ffi.Pointer<
      ffi.NativeFunction<
          OrtStatusPtr Function(ffi.Pointer<OrtRunOptions> options,
              ffi.Int log_verbosity_level)>> RunOptionsSetRunLogVerbosityLevel;

  external ffi.Pointer<
      ffi.NativeFunction<
          OrtStatusPtr Function(ffi.Pointer<OrtRunOptions> options,
              ffi.Int log_severity_level)>> RunOptionsSetRunLogSeverityLevel;

  external ffi.Pointer<
      ffi.NativeFunction<
          OrtStatusPtr Function(ffi.Pointer<OrtRunOptions> options,
              ffi.Pointer<ffi.Char> run_tag)>> RunOptionsSetRunTag;

  external ffi.Pointer<
          ffi.NativeFunction<
              OrtStatusPtr Function(ffi.Pointer<OrtRunOptions> options,
                  ffi.Pointer<ffi.Int> log_verbosity_level)>>
      RunOptionsGetRunLogVerbosityLevel;

  external ffi.Pointer<
          ffi.NativeFunction<
              OrtStatusPtr Function(ffi.Pointer<OrtRunOptions> options,
                  ffi.Pointer<ffi.Int> log_severity_level)>>
      RunOptionsGetRunLogSeverityLevel;

  external ffi.Pointer<
      ffi.NativeFunction<
          OrtStatusPtr Function(ffi.Pointer<OrtRunOptions> options,
              ffi.Pointer<ffi.Pointer<ffi.Char>> run_tag)>> RunOptionsGetRunTag;

  external ffi.Pointer<
          ffi.NativeFunction<
              OrtStatusPtr Function(ffi.Pointer<OrtRunOptions> options)>>
      RunOptionsSetTerminate;

  external ffi.Pointer<
          ffi.NativeFunction<
              OrtStatusPtr Function(ffi.Pointer<OrtRunOptions> options)>>
      RunOptionsUnsetTerminate;

  external ffi.Pointer<
      ffi.NativeFunction<
          OrtStatusPtr Function(
              ffi.Pointer<OrtAllocator> allocator,
              ffi.Pointer<ffi.Int64> shape,
              ffi.Size shape_len,
              ffi.UnsignedInt type,
              ffi.Pointer<ffi.Pointer<OrtValue>> out)>> CreateTensorAsOrtValue;

  external ffi.Pointer<
          ffi.NativeFunction<
              OrtStatusPtr Function(
                  ffi.Pointer<OrtMemoryInfo> info,
                  ffi.Pointer<ffi.Void> p_data,
                  ffi.Size p_data_len,
                  ffi.Pointer<ffi.Int64> shape,
                  ffi.Size shape_len,
                  ffi.UnsignedInt type,
                  ffi.Pointer<ffi.Pointer<OrtValue>> out)>>
      CreateTensorWithDataAsOrtValue;

  external ffi.Pointer<
      ffi.NativeFunction<
          OrtStatusPtr Function(
              ffi.Pointer<OrtValue> value, ffi.Pointer<ffi.Int> out)>> IsTensor;

  external ffi.Pointer<
      ffi.NativeFunction<
          OrtStatusPtr Function(ffi.Pointer<OrtValue> value,
              ffi.Pointer<ffi.Pointer<ffi.Void>> out)>> GetTensorMutableData;

  external ffi.Pointer<
      ffi.NativeFunction<
          OrtStatusPtr Function(
              ffi.Pointer<OrtValue> value,
              ffi.Pointer<ffi.Pointer<ffi.Char>> s,
              ffi.Size s_len)>> FillStringTensor;

  external ffi.Pointer<
          ffi.NativeFunction<
              OrtStatusPtr Function(
                  ffi.Pointer<OrtValue> value, ffi.Pointer<ffi.Size> len)>>
      GetStringTensorDataLength;

  external ffi.Pointer<
      ffi.NativeFunction<
          OrtStatusPtr Function(
              ffi.Pointer<OrtValue> value,
              ffi.Pointer<ffi.Void> s,
              ffi.Size s_len,
              ffi.Pointer<ffi.Size> offsets,
              ffi.Size offsets_len)>> GetStringTensorContent;

  external ffi.Pointer<
          ffi.NativeFunction<
              OrtStatusPtr Function(ffi.Pointer<OrtTypeInfo> type_info,
                  ffi.Pointer<ffi.Pointer<OrtTensorTypeAndShapeInfo>> out)>>
      CastTypeInfoToTensorInfo;

  external ffi.Pointer<
      ffi.NativeFunction<
          OrtStatusPtr Function(ffi.Pointer<OrtTypeInfo> type_info,
              ffi.Pointer<ffi.UnsignedInt> out)>> GetOnnxTypeFromTypeInfo;

  external ffi.Pointer<
          ffi.NativeFunction<
              OrtStatusPtr Function(
                  ffi.Pointer<ffi.Pointer<OrtTensorTypeAndShapeInfo>> out)>>
      CreateTensorTypeAndShapeInfo;

  external ffi.Pointer<
      ffi.NativeFunction<
          OrtStatusPtr Function(ffi.Pointer<OrtTensorTypeAndShapeInfo> info,
              ffi.UnsignedInt type)>> SetTensorElementType;

  external ffi.Pointer<
      ffi.NativeFunction<
          OrtStatusPtr Function(
              ffi.Pointer<OrtTensorTypeAndShapeInfo> info,
              ffi.Pointer<ffi.Int64> dim_values,
              ffi.Size dim_count)>> SetDimensions;

  external ffi.Pointer<
      ffi.NativeFunction<
          OrtStatusPtr Function(ffi.Pointer<OrtTensorTypeAndShapeInfo> info,
              ffi.Pointer<ffi.UnsignedInt> out)>> GetTensorElementType;

  external ffi.Pointer<
      ffi.NativeFunction<
          OrtStatusPtr Function(ffi.Pointer<OrtTensorTypeAndShapeInfo> info,
              ffi.Pointer<ffi.Size> out)>> GetDimensionsCount;

  external ffi.Pointer<
      ffi.NativeFunction<
          OrtStatusPtr Function(
              ffi.Pointer<OrtTensorTypeAndShapeInfo> info,
              ffi.Pointer<ffi.Int64> dim_values,
              ffi.Size dim_values_length)>> GetDimensions;

  external ffi.Pointer<
      ffi.NativeFunction<
          OrtStatusPtr Function(
              ffi.Pointer<OrtTensorTypeAndShapeInfo> info,
              ffi.Pointer<ffi.Pointer<ffi.Char>> dim_params,
              ffi.Size dim_params_length)>> GetSymbolicDimensions;

  external ffi.Pointer<
      ffi.NativeFunction<
          OrtStatusPtr Function(ffi.Pointer<OrtTensorTypeAndShapeInfo> info,
              ffi.Pointer<ffi.Size> out)>> GetTensorShapeElementCount;

  external ffi.Pointer<
          ffi.NativeFunction<
              OrtStatusPtr Function(ffi.Pointer<OrtValue> value,
                  ffi.Pointer<ffi.Pointer<OrtTensorTypeAndShapeInfo>> out)>>
      GetTensorTypeAndShape;

  external ffi.Pointer<
      ffi.NativeFunction<
          OrtStatusPtr Function(ffi.Pointer<OrtValue> value,
              ffi.Pointer<ffi.Pointer<OrtTypeInfo>> out)>> GetTypeInfo;

  external ffi.Pointer<
      ffi.NativeFunction<
          OrtStatusPtr Function(ffi.Pointer<OrtValue> value,
              ffi.Pointer<ffi.UnsignedInt> out)>> GetValueType;

  external ffi.Pointer<
      ffi.NativeFunction<
          OrtStatusPtr Function(
              ffi.Pointer<ffi.Char> name,
              ffi.Int type,
              ffi.Int id,
              ffi.Int mem_type,
              ffi.Pointer<ffi.Pointer<OrtMemoryInfo>> out)>> CreateMemoryInfo;

  external ffi.Pointer<
          ffi.NativeFunction<
              OrtStatusPtr Function(ffi.Int type, ffi.Int mem_type,
                  ffi.Pointer<ffi.Pointer<OrtMemoryInfo>> out)>>
      CreateCpuMemoryInfo;

  external ffi.Pointer<
      ffi.NativeFunction<
          OrtStatusPtr Function(
              ffi.Pointer<OrtMemoryInfo> info1,
              ffi.Pointer<OrtMemoryInfo> info2,
              ffi.Pointer<ffi.Int> out)>> CompareMemoryInfo;

  external ffi.Pointer<
      ffi.NativeFunction<
          OrtStatusPtr Function(ffi.Pointer<OrtMemoryInfo> ptr,
              ffi.Pointer<ffi.Pointer<ffi.Char>> out)>> MemoryInfoGetName;

  external ffi.Pointer<
          ffi.NativeFunction<
              OrtStatusPtr Function(
                  ffi.Pointer<OrtMemoryInfo> ptr, ffi.Pointer<ffi.Int> out)>>
      MemoryInfoGetId;

  external ffi.Pointer<
          ffi.NativeFunction<
              OrtStatusPtr Function(
                  ffi.Pointer<OrtMemoryInfo> ptr, ffi.Pointer<ffi.Int> out)>>
      MemoryInfoGetMemType;

  external ffi.Pointer<
          ffi.NativeFunction<
              OrtStatusPtr Function(
                  ffi.Pointer<OrtMemoryInfo> ptr, ffi.Pointer<ffi.Int> out)>>
      MemoryInfoGetType;

  external ffi.Pointer<
      ffi.NativeFunction<
          OrtStatusPtr Function(
              ffi.Pointer<OrtAllocator> ort_allocator,
              ffi.Size size,
              ffi.Pointer<ffi.Pointer<ffi.Void>> out)>> AllocatorAlloc;

  external ffi.Pointer<
      ffi.NativeFunction<
          OrtStatusPtr Function(ffi.Pointer<OrtAllocator> ort_allocator,
              ffi.Pointer<ffi.Void> p)>> AllocatorFree;

  external ffi.Pointer<
      ffi.NativeFunction<
          OrtStatusPtr Function(ffi.Pointer<OrtAllocator> ort_allocator,
              ffi.Pointer<ffi.Pointer<OrtMemoryInfo>> out)>> AllocatorGetInfo;

  external ffi.Pointer<
          ffi.NativeFunction<
              OrtStatusPtr Function(
                  ffi.Pointer<ffi.Pointer<OrtAllocator>> out)>>
      GetAllocatorWithDefaultOptions;

  external ffi.Pointer<
      ffi.NativeFunction<
          OrtStatusPtr Function(
              ffi.Pointer<OrtSessionOptions> options,
              ffi.Pointer<ffi.Char> dim_denotation,
              ffi.Int64 dim_value)>> AddFreeDimensionOverride;

  external ffi.Pointer<
      ffi.NativeFunction<
          OrtStatusPtr Function(
              ffi.Pointer<OrtValue> value,
              ffi.Int index,
              ffi.Pointer<OrtAllocator> allocator,
              ffi.Pointer<ffi.Pointer<OrtValue>> out)>> GetValue;

  external ffi.Pointer<
          ffi.NativeFunction<
              OrtStatusPtr Function(
                  ffi.Pointer<OrtValue> value, ffi.Pointer<ffi.Size> out)>>
      GetValueCount;

  external ffi.Pointer<
      ffi.NativeFunction<
          OrtStatusPtr Function(
              ffi.Pointer<ffi.Pointer<OrtValue>> in$,
              ffi.Size num_values,
              ffi.UnsignedInt value_type,
              ffi.Pointer<ffi.Pointer<OrtValue>> out)>> CreateValue;

  external ffi.Pointer<
      ffi.NativeFunction<
          OrtStatusPtr Function(
              ffi.Pointer<ffi.Char> domain_name,
              ffi.Pointer<ffi.Char> type_name,
              ffi.Pointer<ffi.Void> data_container,
              ffi.Size data_container_size,
              ffi.Pointer<ffi.Pointer<OrtValue>> out)>> CreateOpaqueValue;

  external ffi.Pointer<
      ffi.NativeFunction<
          OrtStatusPtr Function(
              ffi.Pointer<ffi.Char> domain_name,
              ffi.Pointer<ffi.Char> type_name,
              ffi.Pointer<OrtValue> in$,
              ffi.Pointer<ffi.Void> data_container,
              ffi.Size data_container_size)>> GetOpaqueValue;

  external ffi.Pointer<
      ffi.NativeFunction<
          OrtStatusPtr Function(
              ffi.Pointer<OrtKernelInfo> info,
              ffi.Pointer<ffi.Char> name,
              ffi.Pointer<ffi.Float> out)>> KernelInfoGetAttribute_float;

  external ffi.Pointer<
      ffi.NativeFunction<
          OrtStatusPtr Function(
              ffi.Pointer<OrtKernelInfo> info,
              ffi.Pointer<ffi.Char> name,
              ffi.Pointer<ffi.Int64> out)>> KernelInfoGetAttribute_int64;

  external ffi.Pointer<
      ffi.NativeFunction<
          OrtStatusPtr Function(
              ffi.Pointer<OrtKernelInfo> info,
              ffi.Pointer<ffi.Char> name,
              ffi.Pointer<ffi.Char> out,
              ffi.Pointer<ffi.Size> size)>> KernelInfoGetAttribute_string;

  external ffi.Pointer<
      ffi.NativeFunction<
          OrtStatusPtr Function(ffi.Pointer<OrtKernelContext> context,
              ffi.Pointer<ffi.Size> out)>> KernelContext_GetInputCount;

  external ffi.Pointer<
      ffi.NativeFunction<
          OrtStatusPtr Function(ffi.Pointer<OrtKernelContext> context,
              ffi.Pointer<ffi.Size> out)>> KernelContext_GetOutputCount;

  external ffi.Pointer<
      ffi.NativeFunction<
          OrtStatusPtr Function(
              ffi.Pointer<OrtKernelContext> context,
              ffi.Size index,
              ffi.Pointer<ffi.Pointer<OrtValue>> out)>> KernelContext_GetInput;

  external ffi.Pointer<
      ffi.NativeFunction<
          OrtStatusPtr Function(
              ffi.Pointer<OrtKernelContext> context,
              ffi.Size index,
              ffi.Pointer<ffi.Int64> dim_values,
              ffi.Size dim_count,
              ffi.Pointer<ffi.Pointer<OrtValue>> out)>> KernelContext_GetOutput;

  external ffi
      .Pointer<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<OrtEnv> input)>>
      ReleaseEnv;

  external ffi.Pointer<
          ffi.NativeFunction<ffi.Void Function(ffi.Pointer<OrtStatus> input)>>
      ReleaseStatus;

  external ffi.Pointer<
          ffi
          .NativeFunction<ffi.Void Function(ffi.Pointer<OrtMemoryInfo> input)>>
      ReleaseMemoryInfo;

  external ffi.Pointer<
          ffi.NativeFunction<ffi.Void Function(ffi.Pointer<OrtSession> input)>>
      ReleaseSession;

  external ffi.Pointer<
          ffi.NativeFunction<ffi.Void Function(ffi.Pointer<OrtValue> input)>>
      ReleaseValue;

  external ffi.Pointer<
          ffi
          .NativeFunction<ffi.Void Function(ffi.Pointer<OrtRunOptions> input)>>
      ReleaseRunOptions;

  external ffi.Pointer<
          ffi.NativeFunction<ffi.Void Function(ffi.Pointer<OrtTypeInfo> input)>>
      ReleaseTypeInfo;

  external ffi.Pointer<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<OrtTensorTypeAndShapeInfo> input)>>
      ReleaseTensorTypeAndShapeInfo;

  external ffi.Pointer<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<OrtSessionOptions> input)>>
      ReleaseSessionOptions;

  external ffi.Pointer<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<OrtCustomOpDomain> input)>>
      ReleaseCustomOpDomain;

  external ffi.Pointer<
      ffi.NativeFunction<
          OrtStatusPtr Function(
              ffi.Pointer<OrtTypeInfo> type_info,
              ffi.Pointer<ffi.Pointer<ffi.Char>> denotation,
              ffi.Pointer<ffi.Size> len)>> GetDenotationFromTypeInfo;

  external ffi.Pointer<
          ffi.NativeFunction<
              OrtStatusPtr Function(ffi.Pointer<OrtTypeInfo> type_info,
                  ffi.Pointer<ffi.Pointer<OrtMapTypeInfo>> out)>>
      CastTypeInfoToMapTypeInfo;

  external ffi.Pointer<
          ffi.NativeFunction<
              OrtStatusPtr Function(ffi.Pointer<OrtTypeInfo> type_info,
                  ffi.Pointer<ffi.Pointer<OrtSequenceTypeInfo>> out)>>
      CastTypeInfoToSequenceTypeInfo;

  external ffi.Pointer<
      ffi.NativeFunction<
          OrtStatusPtr Function(ffi.Pointer<OrtMapTypeInfo> map_type_info,
              ffi.Pointer<ffi.UnsignedInt> out)>> GetMapKeyType;

  external ffi.Pointer<
          ffi.NativeFunction<
              OrtStatusPtr Function(ffi.Pointer<OrtMapTypeInfo> map_type_info,
                  ffi.Pointer<ffi.Pointer<OrtTypeInfo>> type_info)>>
      GetMapValueType;

  external ffi.Pointer<
          ffi.NativeFunction<
              OrtStatusPtr Function(
                  ffi.Pointer<OrtSequenceTypeInfo> sequence_type_info,
                  ffi.Pointer<ffi.Pointer<OrtTypeInfo>> type_info)>>
      GetSequenceElementType;

  external ffi.Pointer<
          ffi
          .NativeFunction<ffi.Void Function(ffi.Pointer<OrtMapTypeInfo> input)>>
      ReleaseMapTypeInfo;

  external ffi.Pointer<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<OrtSequenceTypeInfo> input)>>
      ReleaseSequenceTypeInfo;

  external ffi.Pointer<
      ffi.NativeFunction<
          OrtStatusPtr Function(
              ffi.Pointer<OrtSession> session,
              ffi.Pointer<OrtAllocator> allocator,
              ffi.Pointer<ffi.Pointer<ffi.Char>> out)>> SessionEndProfiling;

  external ffi.Pointer<
          ffi.NativeFunction<
              OrtStatusPtr Function(ffi.Pointer<OrtSession> session,
                  ffi.Pointer<ffi.Pointer<OrtModelMetadata>> out)>>
      SessionGetModelMetadata;

  external ffi.Pointer<
          ffi.NativeFunction<
              OrtStatusPtr Function(
                  ffi.Pointer<OrtModelMetadata> model_metadata,
                  ffi.Pointer<OrtAllocator> allocator,
                  ffi.Pointer<ffi.Pointer<ffi.Char>> value)>>
      ModelMetadataGetProducerName;

  external ffi.Pointer<
          ffi.NativeFunction<
              OrtStatusPtr Function(
                  ffi.Pointer<OrtModelMetadata> model_metadata,
                  ffi.Pointer<OrtAllocator> allocator,
                  ffi.Pointer<ffi.Pointer<ffi.Char>> value)>>
      ModelMetadataGetGraphName;

  external ffi.Pointer<
          ffi.NativeFunction<
              OrtStatusPtr Function(
                  ffi.Pointer<OrtModelMetadata> model_metadata,
                  ffi.Pointer<OrtAllocator> allocator,
                  ffi.Pointer<ffi.Pointer<ffi.Char>> value)>>
      ModelMetadataGetDomain;

  external ffi.Pointer<
          ffi.NativeFunction<
              OrtStatusPtr Function(
                  ffi.Pointer<OrtModelMetadata> model_metadata,
                  ffi.Pointer<OrtAllocator> allocator,
                  ffi.Pointer<ffi.Pointer<ffi.Char>> value)>>
      ModelMetadataGetDescription;

  external ffi.Pointer<
          ffi.NativeFunction<
              OrtStatusPtr Function(
                  ffi.Pointer<OrtModelMetadata> model_metadata,
                  ffi.Pointer<OrtAllocator> allocator,
                  ffi.Pointer<ffi.Char> key,
                  ffi.Pointer<ffi.Pointer<ffi.Char>> value)>>
      ModelMetadataLookupCustomMetadataMap;

  external ffi.Pointer<
      ffi.NativeFunction<
          OrtStatusPtr Function(ffi.Pointer<OrtModelMetadata> model_metadata,
              ffi.Pointer<ffi.Int64> value)>> ModelMetadataGetVersion;

  external ffi.Pointer<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<OrtModelMetadata> input)>>
      ReleaseModelMetadata;

  external ffi.Pointer<
          ffi.NativeFunction<
              OrtStatusPtr Function(
                  ffi.UnsignedInt log_severity_level,
                  ffi.Pointer<ffi.Char> logid,
                  ffi.Pointer<OrtThreadingOptions> tp_options,
                  ffi.Pointer<ffi.Pointer<OrtEnv>> out)>>
      CreateEnvWithGlobalThreadPools;

  external ffi.Pointer<
          ffi.NativeFunction<
              OrtStatusPtr Function(ffi.Pointer<OrtSessionOptions> options)>>
      DisablePerSessionThreads;

  external ffi.Pointer<
          ffi.NativeFunction<
              OrtStatusPtr Function(
                  ffi.Pointer<ffi.Pointer<OrtThreadingOptions>> out)>>
      CreateThreadingOptions;

  external ffi.Pointer<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<OrtThreadingOptions> input)>>
      ReleaseThreadingOptions;

  external ffi.Pointer<
          ffi.NativeFunction<
              OrtStatusPtr Function(
                  ffi.Pointer<OrtModelMetadata> model_metadata,
                  ffi.Pointer<OrtAllocator> allocator,
                  ffi.Pointer<ffi.Pointer<ffi.Pointer<ffi.Char>>> keys,
                  ffi.Pointer<ffi.Int64> num_keys)>>
      ModelMetadataGetCustomMetadataMapKeys;

  external ffi.Pointer<
      ffi.NativeFunction<
          OrtStatusPtr Function(
              ffi.Pointer<OrtSessionOptions> options,
              ffi.Pointer<ffi.Char> dim_name,
              ffi.Int64 dim_value)>> AddFreeDimensionOverrideByName;

  external ffi.Pointer<
      ffi.NativeFunction<
          OrtStatusPtr Function(
              ffi.Pointer<ffi.Pointer<ffi.Pointer<ffi.Char>>> out_ptr,
              ffi.Pointer<ffi.Int> provider_length)>> GetAvailableProviders;

  external ffi.Pointer<
      ffi.NativeFunction<
          OrtStatusPtr Function(ffi.Pointer<ffi.Pointer<ffi.Char>> ptr,
              ffi.Int providers_length)>> ReleaseAvailableProviders;

  external ffi.Pointer<
      ffi.NativeFunction<
          OrtStatusPtr Function(ffi.Pointer<OrtValue> value, ffi.Size index,
              ffi.Pointer<ffi.Size> out)>> GetStringTensorElementLength;

  external ffi.Pointer<
      ffi.NativeFunction<
          OrtStatusPtr Function(ffi.Pointer<OrtValue> value, ffi.Size s_len,
              ffi.Size index, ffi.Pointer<ffi.Void> s)>> GetStringTensorElement;

  external ffi.Pointer<
      ffi.NativeFunction<
          OrtStatusPtr Function(
              ffi.Pointer<OrtValue> value,
              ffi.Pointer<ffi.Char> s,
              ffi.Size index)>> FillStringTensorElement;

  external ffi.Pointer<
      ffi.NativeFunction<
          OrtStatusPtr Function(
              ffi.Pointer<OrtSessionOptions> options,
              ffi.Pointer<ffi.Char> config_key,
              ffi.Pointer<ffi.Char> config_value)>> AddSessionConfigEntry;

  external ffi.Pointer<
      ffi.NativeFunction<
          OrtStatusPtr Function(
              ffi.Pointer<OrtSession> session,
              ffi.Pointer<OrtMemoryInfo> mem_info,
              ffi.Pointer<ffi.Pointer<OrtAllocator>> out)>> CreateAllocator;

  external ffi.Pointer<
          ffi
          .NativeFunction<ffi.Void Function(ffi.Pointer<OrtAllocator> input)>>
      ReleaseAllocator;

  external ffi.Pointer<
      ffi.NativeFunction<
          OrtStatusPtr Function(
              ffi.Pointer<OrtSession> session,
              ffi.Pointer<OrtRunOptions> run_options,
              ffi.Pointer<OrtIoBinding> binding_ptr)>> RunWithBinding;

  external ffi.Pointer<
      ffi.NativeFunction<
          OrtStatusPtr Function(ffi.Pointer<OrtSession> session,
              ffi.Pointer<ffi.Pointer<OrtIoBinding>> out)>> CreateIoBinding;

  external ffi.Pointer<
          ffi
          .NativeFunction<ffi.Void Function(ffi.Pointer<OrtIoBinding> input)>>
      ReleaseIoBinding;

  external ffi.Pointer<
      ffi.NativeFunction<
          OrtStatusPtr Function(
              ffi.Pointer<OrtIoBinding> binding_ptr,
              ffi.Pointer<ffi.Char> name,
              ffi.Pointer<OrtValue> val_ptr)>> BindInput;

  external ffi.Pointer<
      ffi.NativeFunction<
          OrtStatusPtr Function(
              ffi.Pointer<OrtIoBinding> binding_ptr,
              ffi.Pointer<ffi.Char> name,
              ffi.Pointer<OrtValue> val_ptr)>> BindOutput;

  external ffi.Pointer<
      ffi.NativeFunction<
          OrtStatusPtr Function(
              ffi.Pointer<OrtIoBinding> binding_ptr,
              ffi.Pointer<ffi.Char> name,
              ffi.Pointer<OrtMemoryInfo> mem_info_ptr)>> BindOutputToDevice;

  external ffi.Pointer<
      ffi.NativeFunction<
          OrtStatusPtr Function(
              ffi.Pointer<OrtIoBinding> binding_ptr,
              ffi.Pointer<OrtAllocator> allocator,
              ffi.Pointer<ffi.Pointer<ffi.Char>> buffer,
              ffi.Pointer<ffi.Pointer<ffi.Size>> lengths,
              ffi.Pointer<ffi.Size> count)>> GetBoundOutputNames;

  external ffi.Pointer<
      ffi.NativeFunction<
          OrtStatusPtr Function(
              ffi.Pointer<OrtIoBinding> binding_ptr,
              ffi.Pointer<OrtAllocator> allocator,
              ffi.Pointer<ffi.Pointer<ffi.Pointer<OrtValue>>> output,
              ffi.Pointer<ffi.Size> output_count)>> GetBoundOutputValues;

  /// \brief Clears any previously set Inputs for an ::OrtIoBinding
  external ffi.Pointer<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<OrtIoBinding> binding_ptr)>>
      ClearBoundInputs;

  /// \brief Clears any previously set Outputs for an ::OrtIoBinding
  external ffi.Pointer<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<OrtIoBinding> binding_ptr)>>
      ClearBoundOutputs;

  external ffi.Pointer<
      ffi.NativeFunction<
          OrtStatusPtr Function(
              ffi.Pointer<OrtValue> value,
              ffi.Pointer<ffi.Int64> location_values,
              ffi.Size location_values_count,
              ffi.Pointer<ffi.Pointer<ffi.Void>> out)>> TensorAt;

  external ffi.Pointer<
      ffi.NativeFunction<
          OrtStatusPtr Function(
              ffi.Pointer<OrtEnv> env,
              ffi.Pointer<OrtMemoryInfo> mem_info,
              ffi.Pointer<OrtArenaCfg> arena_cfg)>> CreateAndRegisterAllocator;

  external ffi.Pointer<
          ffi.NativeFunction<
              OrtStatusPtr Function(
                  ffi.Pointer<OrtEnv> ort_env, ffi.UnsignedInt projection)>>
      SetLanguageProjection;

  external ffi.Pointer<
      ffi.NativeFunction<
          OrtStatusPtr Function(ffi.Pointer<OrtSession> session,
              ffi.Pointer<ffi.Uint64> out)>> SessionGetProfilingStartTimeNs;

  external ffi.Pointer<
      ffi.NativeFunction<
          OrtStatusPtr Function(ffi.Pointer<OrtThreadingOptions> tp_options,
              ffi.Int intra_op_num_threads)>> SetGlobalIntraOpNumThreads;

  external ffi.Pointer<
      ffi.NativeFunction<
          OrtStatusPtr Function(ffi.Pointer<OrtThreadingOptions> tp_options,
              ffi.Int inter_op_num_threads)>> SetGlobalInterOpNumThreads;

  external ffi.Pointer<
      ffi.NativeFunction<
          OrtStatusPtr Function(ffi.Pointer<OrtThreadingOptions> tp_options,
              ffi.Int allow_spinning)>> SetGlobalSpinControl;

  external ffi.Pointer<
      ffi.NativeFunction<
          OrtStatusPtr Function(
              ffi.Pointer<OrtSessionOptions> options,
              ffi.Pointer<ffi.Char> name,
              ffi.Pointer<OrtValue> val)>> AddInitializer;

  external ffi.Pointer<
          ffi.NativeFunction<
              OrtStatusPtr Function(
                  OrtLoggingFunction logging_function,
                  ffi.Pointer<ffi.Void> logger_param,
                  ffi.UnsignedInt log_severity_level,
                  ffi.Pointer<ffi.Char> logid,
                  ffi.Pointer<OrtThreadingOptions> tp_options,
                  ffi.Pointer<ffi.Pointer<OrtEnv>> out)>>
      CreateEnvWithCustomLoggerAndGlobalThreadPools;

  external ffi.Pointer<
          ffi.NativeFunction<
              OrtStatusPtr Function(ffi.Pointer<OrtSessionOptions> options,
                  ffi.Pointer<OrtCUDAProviderOptions> cuda_options)>>
      SessionOptionsAppendExecutionProvider_CUDA;

  external ffi.Pointer<
          ffi.NativeFunction<
              OrtStatusPtr Function(ffi.Pointer<OrtSessionOptions> options,
                  ffi.Pointer<OrtROCMProviderOptions> rocm_options)>>
      SessionOptionsAppendExecutionProvider_ROCM;

  external ffi.Pointer<
          ffi.NativeFunction<
              OrtStatusPtr Function(ffi.Pointer<OrtSessionOptions> options,
                  ffi.Pointer<OrtOpenVINOProviderOptions> provider_options)>>
      SessionOptionsAppendExecutionProvider_OpenVINO;

  external ffi.Pointer<
          ffi.NativeFunction<
              OrtStatusPtr Function(
                  ffi.Pointer<OrtThreadingOptions> tp_options)>>
      SetGlobalDenormalAsZero;

  external ffi.Pointer<
      ffi.NativeFunction<
          OrtStatusPtr Function(
              ffi.Size max_mem,
              ffi.Int arena_extend_strategy,
              ffi.Int initial_chunk_size_bytes,
              ffi.Int max_dead_bytes_per_chunk,
              ffi.Pointer<ffi.Pointer<OrtArenaCfg>> out)>> CreateArenaCfg;

  external ffi.Pointer<
          ffi.NativeFunction<ffi.Void Function(ffi.Pointer<OrtArenaCfg> input)>>
      ReleaseArenaCfg;

  external ffi.Pointer<
          ffi.NativeFunction<
              OrtStatusPtr Function(
                  ffi.Pointer<OrtModelMetadata> model_metadata,
                  ffi.Pointer<OrtAllocator> allocator,
                  ffi.Pointer<ffi.Pointer<ffi.Char>> value)>>
      ModelMetadataGetGraphDescription;

  external ffi.Pointer<
          ffi.NativeFunction<
              OrtStatusPtr Function(ffi.Pointer<OrtSessionOptions> options,
                  ffi.Pointer<OrtTensorRTProviderOptions> tensorrt_options)>>
      SessionOptionsAppendExecutionProvider_TensorRT;

  external ffi
      .Pointer<ffi.NativeFunction<OrtStatusPtr Function(ffi.Int device_id)>>
      SetCurrentGpuDeviceId;

  external ffi.Pointer<
          ffi.NativeFunction<
              OrtStatusPtr Function(ffi.Pointer<ffi.Int> device_id)>>
      GetCurrentGpuDeviceId;

  external ffi.Pointer<
      ffi.NativeFunction<
          OrtStatusPtr Function(
              ffi.Pointer<OrtKernelInfo> info,
              ffi.Pointer<ffi.Char> name,
              ffi.Pointer<ffi.Float> out,
              ffi.Pointer<ffi.Size> size)>> KernelInfoGetAttributeArray_float;

  external ffi.Pointer<
      ffi.NativeFunction<
          OrtStatusPtr Function(
              ffi.Pointer<OrtKernelInfo> info,
              ffi.Pointer<ffi.Char> name,
              ffi.Pointer<ffi.Int64> out,
              ffi.Pointer<ffi.Size> size)>> KernelInfoGetAttributeArray_int64;

  external ffi.Pointer<
      ffi.NativeFunction<
          OrtStatusPtr Function(
              ffi.Pointer<ffi.Pointer<ffi.Char>> arena_config_keys,
              ffi.Pointer<ffi.Size> arena_config_values,
              ffi.Size num_keys,
              ffi.Pointer<ffi.Pointer<OrtArenaCfg>> out)>> CreateArenaCfgV2;

  external ffi.Pointer<
      ffi.NativeFunction<
          OrtStatusPtr Function(
              ffi.Pointer<OrtRunOptions> options,
              ffi.Pointer<ffi.Char> config_key,
              ffi.Pointer<ffi.Char> config_value)>> AddRunConfigEntry;

  external ffi.Pointer<
          ffi.NativeFunction<
              OrtStatusPtr Function(
                  ffi.Pointer<ffi.Pointer<OrtPrepackedWeightsContainer>> out)>>
      CreatePrepackedWeightsContainer;

  external ffi.Pointer<
          ffi.NativeFunction<
              ffi.Void Function(
                  ffi.Pointer<OrtPrepackedWeightsContainer> input)>>
      ReleasePrepackedWeightsContainer;

  external ffi.Pointer<
          ffi.NativeFunction<
              OrtStatusPtr Function(
                  ffi.Pointer<OrtEnv> env,
                  ffi.Pointer<ffi.Char> model_path,
                  ffi.Pointer<OrtSessionOptions> options,
                  ffi.Pointer<OrtPrepackedWeightsContainer>
                      prepacked_weights_container,
                  ffi.Pointer<ffi.Pointer<OrtSession>> out)>>
      CreateSessionWithPrepackedWeightsContainer;

  external ffi.Pointer<
          ffi.NativeFunction<
              OrtStatusPtr Function(
                  ffi.Pointer<OrtEnv> env,
                  ffi.Pointer<ffi.Void> model_data,
                  ffi.Size model_data_length,
                  ffi.Pointer<OrtSessionOptions> options,
                  ffi.Pointer<OrtPrepackedWeightsContainer>
                      prepacked_weights_container,
                  ffi.Pointer<ffi.Pointer<OrtSession>> out)>>
      CreateSessionFromArrayWithPrepackedWeightsContainer;

  external ffi.Pointer<
          ffi.NativeFunction<
              OrtStatusPtr Function(ffi.Pointer<OrtSessionOptions> options,
                  ffi.Pointer<OrtTensorRTProviderOptionsV2> tensorrt_options)>>
      SessionOptionsAppendExecutionProvider_TensorRT_V2;

  external ffi.Pointer<
          ffi.NativeFunction<
              OrtStatusPtr Function(
                  ffi.Pointer<ffi.Pointer<OrtTensorRTProviderOptionsV2>> out)>>
      CreateTensorRTProviderOptions;

  external ffi.Pointer<
      ffi.NativeFunction<
          OrtStatusPtr Function(
              ffi.Pointer<OrtTensorRTProviderOptionsV2> tensorrt_options,
              ffi.Pointer<ffi.Pointer<ffi.Char>> provider_options_keys,
              ffi.Pointer<ffi.Pointer<ffi.Char>> provider_options_values,
              ffi.Size num_keys)>> UpdateTensorRTProviderOptions;

  external ffi.Pointer<
          ffi.NativeFunction<
              OrtStatusPtr Function(
                  ffi.Pointer<OrtTensorRTProviderOptionsV2> tensorrt_options,
                  ffi.Pointer<OrtAllocator> allocator,
                  ffi.Pointer<ffi.Pointer<ffi.Char>> ptr)>>
      GetTensorRTProviderOptionsAsString;

  /// \brief Release an ::OrtTensorRTProviderOptionsV2
  ///
  /// \note This is an exception in the naming convention of other Release* functions, as the name of the method does not have the V2 suffix, but the type does
  external ffi.Pointer<
          ffi.NativeFunction<
              ffi.Void Function(
                  ffi.Pointer<OrtTensorRTProviderOptionsV2> input)>>
      ReleaseTensorRTProviderOptions;

  external ffi.Pointer<
          ffi.NativeFunction<
              OrtStatusPtr Function(ffi.Pointer<OrtSessionOptions> options)>>
      EnableOrtCustomOps;

  external ffi.Pointer<
      ffi.NativeFunction<
          OrtStatusPtr Function(ffi.Pointer<OrtEnv> env,
              ffi.Pointer<OrtAllocator> allocator)>> RegisterAllocator;

  external ffi.Pointer<
      ffi.NativeFunction<
          OrtStatusPtr Function(ffi.Pointer<OrtEnv> env,
              ffi.Pointer<OrtMemoryInfo> mem_info)>> UnregisterAllocator;

  external ffi.Pointer<
          ffi.NativeFunction<
              OrtStatusPtr Function(
                  ffi.Pointer<OrtValue> value, ffi.Pointer<ffi.Int> out)>>
      IsSparseTensor;

  external ffi.Pointer<
          ffi.NativeFunction<
              OrtStatusPtr Function(
                  ffi.Pointer<OrtAllocator> allocator,
                  ffi.Pointer<ffi.Int64> dense_shape,
                  ffi.Size dense_shape_len,
                  ffi.UnsignedInt type,
                  ffi.Pointer<ffi.Pointer<OrtValue>> out)>>
      CreateSparseTensorAsOrtValue;

  external ffi.Pointer<
      ffi.NativeFunction<
          OrtStatusPtr Function(
              ffi.Pointer<OrtValue> ort_value,
              ffi.Pointer<OrtMemoryInfo> data_mem_info,
              ffi.Pointer<ffi.Int64> values_shape,
              ffi.Size values_shape_len,
              ffi.Pointer<ffi.Void> values,
              ffi.Pointer<ffi.Int64> indices_data,
              ffi.Size indices_num)>> FillSparseTensorCoo;

  external ffi.Pointer<
      ffi.NativeFunction<
          OrtStatusPtr Function(
              ffi.Pointer<OrtValue> ort_value,
              ffi.Pointer<OrtMemoryInfo> data_mem_info,
              ffi.Pointer<ffi.Int64> values_shape,
              ffi.Size values_shape_len,
              ffi.Pointer<ffi.Void> values,
              ffi.Pointer<ffi.Int64> inner_indices_data,
              ffi.Size inner_indices_num,
              ffi.Pointer<ffi.Int64> outer_indices_data,
              ffi.Size outer_indices_num)>> FillSparseTensorCsr;

  external ffi.Pointer<
          ffi.NativeFunction<
              OrtStatusPtr Function(
                  ffi.Pointer<OrtValue> ort_value,
                  ffi.Pointer<OrtMemoryInfo> data_mem_info,
                  ffi.Pointer<ffi.Int64> values_shape,
                  ffi.Size values_shape_len,
                  ffi.Pointer<ffi.Void> values,
                  ffi.Pointer<ffi.Int64> indices_shape_data,
                  ffi.Size indices_shape_len,
                  ffi.Pointer<ffi.Int32> indices_data)>>
      FillSparseTensorBlockSparse;

  external ffi.Pointer<
          ffi.NativeFunction<
              OrtStatusPtr Function(
                  ffi.Pointer<OrtMemoryInfo> info,
                  ffi.Pointer<ffi.Void> p_data,
                  ffi.Pointer<ffi.Int64> dense_shape,
                  ffi.Size dense_shape_len,
                  ffi.Pointer<ffi.Int64> values_shape,
                  ffi.Size values_shape_len,
                  ffi.UnsignedInt type,
                  ffi.Pointer<ffi.Pointer<OrtValue>> out)>>
      CreateSparseTensorWithValuesAsOrtValue;

  external ffi.Pointer<
      ffi.NativeFunction<
          OrtStatusPtr Function(
              ffi.Pointer<OrtValue> ort_value,
              ffi.Pointer<ffi.Int64> indices_data,
              ffi.Size indices_num)>> UseCooIndices;

  external ffi.Pointer<
      ffi.NativeFunction<
          OrtStatusPtr Function(
              ffi.Pointer<OrtValue> ort_value,
              ffi.Pointer<ffi.Int64> inner_data,
              ffi.Size inner_num,
              ffi.Pointer<ffi.Int64> outer_data,
              ffi.Size outer_num)>> UseCsrIndices;

  external ffi.Pointer<
      ffi.NativeFunction<
          OrtStatusPtr Function(
              ffi.Pointer<OrtValue> ort_value,
              ffi.Pointer<ffi.Int64> indices_shape,
              ffi.Size indices_shape_len,
              ffi.Pointer<ffi.Int32> indices_data)>> UseBlockSparseIndices;

  external ffi.Pointer<
      ffi.NativeFunction<
          OrtStatusPtr Function(ffi.Pointer<OrtValue> ort_value,
              ffi.Pointer<ffi.UnsignedInt> out)>> GetSparseTensorFormat;

  external ffi.Pointer<
          ffi.NativeFunction<
              OrtStatusPtr Function(ffi.Pointer<OrtValue> ort_value,
                  ffi.Pointer<ffi.Pointer<OrtTensorTypeAndShapeInfo>> out)>>
      GetSparseTensorValuesTypeAndShape;

  external ffi.Pointer<
      ffi.NativeFunction<
          OrtStatusPtr Function(ffi.Pointer<OrtValue> ort_value,
              ffi.Pointer<ffi.Pointer<ffi.Void>> out)>> GetSparseTensorValues;

  external ffi.Pointer<
          ffi.NativeFunction<
              OrtStatusPtr Function(
                  ffi.Pointer<OrtValue> ort_value,
                  ffi.UnsignedInt indices_format,
                  ffi.Pointer<ffi.Pointer<OrtTensorTypeAndShapeInfo>> out)>>
      GetSparseTensorIndicesTypeShape;

  external ffi.Pointer<
          ffi.NativeFunction<
              OrtStatusPtr Function(
                  ffi.Pointer<OrtValue> ort_value,
                  ffi.UnsignedInt indices_format,
                  ffi.Pointer<ffi.Size> num_indices,
                  ffi.Pointer<ffi.Pointer<ffi.Void>> indices)>>
      GetSparseTensorIndices;

  external ffi.Pointer<
      ffi.NativeFunction<
          OrtStatusPtr Function(
              ffi.Pointer<OrtValue> value, ffi.Pointer<ffi.Int> out)>> HasValue;

  external ffi.Pointer<
          ffi.NativeFunction<
              OrtStatusPtr Function(ffi.Pointer<OrtKernelContext> context,
                  ffi.Pointer<ffi.Pointer<ffi.Void>> out)>>
      KernelContext_GetGPUComputeStream;

  external ffi.Pointer<
          ffi.NativeFunction<
              OrtStatusPtr Function(ffi.Pointer<OrtValue> value,
                  ffi.Pointer<ffi.Pointer<OrtMemoryInfo>> mem_info)>>
      GetTensorMemoryInfo;

  external ffi.Pointer<
          ffi.NativeFunction<
              OrtStatusPtr Function(
                  ffi.Pointer<ffi.Char> provider_name,
                  ffi.Uint32 version,
                  ffi.Pointer<ffi.Pointer<ffi.Void>> provider_api)>>
      GetExecutionProviderApi;

  external ffi.Pointer<
          ffi.NativeFunction<
              OrtStatusPtr Function(ffi.Pointer<OrtSessionOptions> options,
                  OrtCustomCreateThreadFn ort_custom_create_thread_fn)>>
      SessionOptionsSetCustomCreateThreadFn;

  external ffi.Pointer<
          ffi.NativeFunction<
              OrtStatusPtr Function(ffi.Pointer<OrtSessionOptions> options,
                  ffi.Pointer<ffi.Void> ort_custom_thread_creation_options)>>
      SessionOptionsSetCustomThreadCreationOptions;

  external ffi.Pointer<
          ffi.NativeFunction<
              OrtStatusPtr Function(ffi.Pointer<OrtSessionOptions> options,
                  OrtCustomJoinThreadFn ort_custom_join_thread_fn)>>
      SessionOptionsSetCustomJoinThreadFn;

  external ffi.Pointer<
          ffi.NativeFunction<
              OrtStatusPtr Function(ffi.Pointer<OrtThreadingOptions> tp_options,
                  OrtCustomCreateThreadFn ort_custom_create_thread_fn)>>
      SetGlobalCustomCreateThreadFn;

  external ffi.Pointer<
          ffi.NativeFunction<
              OrtStatusPtr Function(ffi.Pointer<OrtThreadingOptions> tp_options,
                  ffi.Pointer<ffi.Void> ort_custom_thread_creation_options)>>
      SetGlobalCustomThreadCreationOptions;

  external ffi.Pointer<
          ffi.NativeFunction<
              OrtStatusPtr Function(ffi.Pointer<OrtThreadingOptions> tp_options,
                  OrtCustomJoinThreadFn ort_custom_join_thread_fn)>>
      SetGlobalCustomJoinThreadFn;

  external ffi.Pointer<
          ffi.NativeFunction<
              OrtStatusPtr Function(ffi.Pointer<OrtIoBinding> binding_ptr)>>
      SynchronizeBoundInputs;

  external ffi.Pointer<
          ffi.NativeFunction<
              OrtStatusPtr Function(ffi.Pointer<OrtIoBinding> binding_ptr)>>
      SynchronizeBoundOutputs;

  external ffi.Pointer<
          ffi.NativeFunction<
              OrtStatusPtr Function(ffi.Pointer<OrtSessionOptions> options,
                  ffi.Pointer<OrtCUDAProviderOptionsV2> cuda_options)>>
      SessionOptionsAppendExecutionProvider_CUDA_V2;

  external ffi.Pointer<
          ffi.NativeFunction<
              OrtStatusPtr Function(
                  ffi.Pointer<ffi.Pointer<OrtCUDAProviderOptionsV2>> out)>>
      CreateCUDAProviderOptions;

  external ffi.Pointer<
      ffi.NativeFunction<
          OrtStatusPtr Function(
              ffi.Pointer<OrtCUDAProviderOptionsV2> cuda_options,
              ffi.Pointer<ffi.Pointer<ffi.Char>> provider_options_keys,
              ffi.Pointer<ffi.Pointer<ffi.Char>> provider_options_values,
              ffi.Size num_keys)>> UpdateCUDAProviderOptions;

  external ffi.Pointer<
          ffi.NativeFunction<
              OrtStatusPtr Function(
                  ffi.Pointer<OrtCUDAProviderOptionsV2> cuda_options,
                  ffi.Pointer<OrtAllocator> allocator,
                  ffi.Pointer<ffi.Pointer<ffi.Char>> ptr)>>
      GetCUDAProviderOptionsAsString;

  /// \brief Release an ::OrtCUDAProviderOptionsV2
  ///
  /// \note This is an exception in the naming convention of other Release* functions, as the name of the method does not have the V2 suffix, but the type does
  ///
  /// \since Version 1.11.
  external ffi.Pointer<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<OrtCUDAProviderOptionsV2> input)>>
      ReleaseCUDAProviderOptions;

  external ffi.Pointer<
          ffi.NativeFunction<
              OrtStatusPtr Function(ffi.Pointer<OrtSessionOptions> options,
                  ffi.Pointer<OrtMIGraphXProviderOptions> migraphx_options)>>
      SessionOptionsAppendExecutionProvider_MIGraphX;

  external ffi.Pointer<
      ffi.NativeFunction<
          OrtStatusPtr Function(
              ffi.Pointer<OrtSessionOptions> options,
              ffi.Pointer<ffi.Pointer<ffi.Char>> initializer_names,
              ffi.Pointer<ffi.Pointer<OrtValue>> initializers,
              ffi.Size num_initializers)>> AddExternalInitializers;

  external ffi.Pointer<
      ffi.NativeFunction<
          OrtStatusPtr Function(
              ffi.Pointer<ffi.Char> name,
              ffi.Pointer<ffi.Void> data,
              ffi.Int len,
              ffi.UnsignedInt type,
              ffi.Pointer<ffi.Pointer<OrtOpAttr>> op_attr)>> CreateOpAttr;

  external ffi.Pointer<
          ffi.NativeFunction<ffi.Void Function(ffi.Pointer<OrtOpAttr> input)>>
      ReleaseOpAttr;

  external ffi.Pointer<
      ffi.NativeFunction<
          OrtStatusPtr Function(
              ffi.Pointer<OrtKernelInfo> info,
              ffi.Pointer<ffi.Char> op_name,
              ffi.Pointer<ffi.Char> domain,
              ffi.Int version,
              ffi.Pointer<ffi.Pointer<ffi.Char>> type_constraint_names,
              ffi.Pointer<ffi.UnsignedInt> type_constraint_values,
              ffi.Int type_constraint_count,
              ffi.Pointer<ffi.Pointer<OrtOpAttr>> attr_values,
              ffi.Int attr_count,
              ffi.Int input_count,
              ffi.Int output_count,
              ffi.Pointer<ffi.Pointer<OrtOp>> ort_op)>> CreateOp;

  external ffi.Pointer<
      ffi.NativeFunction<
          OrtStatusPtr Function(
              ffi.Pointer<OrtKernelContext> context,
              ffi.Pointer<OrtOp> ort_op,
              ffi.Pointer<ffi.Pointer<OrtValue>> input_values,
              ffi.Int input_count,
              ffi.Pointer<ffi.Pointer<OrtValue>> output_values,
              ffi.Int output_count)>> InvokeOp;

  external ffi
      .Pointer<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<OrtOp> input)>>
      ReleaseOp;

  external ffi.Pointer<
      ffi.NativeFunction<
          OrtStatusPtr Function(
              ffi.Pointer<OrtSessionOptions> options,
              ffi.Pointer<ffi.Char> provider_name,
              ffi.Pointer<ffi.Pointer<ffi.Char>> provider_options_keys,
              ffi.Pointer<ffi.Pointer<ffi.Char>> provider_options_values,
              ffi.Size num_keys)>> SessionOptionsAppendExecutionProvider;

  external ffi.Pointer<
          ffi.NativeFunction<
              OrtStatusPtr Function(ffi.Pointer<OrtKernelInfo> info,
                  ffi.Pointer<ffi.Pointer<OrtKernelInfo>> info_copy)>>
      CopyKernelInfo;

  external ffi.Pointer<
          ffi
          .NativeFunction<ffi.Void Function(ffi.Pointer<OrtKernelInfo> input)>>
      ReleaseKernelInfo;

  /// \name Ort Training
  /// @{
  ///   /** \brief Gets the Training C Api struct
  ///    *
  ///    * Call this function to access the ::OrtTrainingApi structure that holds pointers to functions that enable
  ///    * training with onnxruntime.
  ///    * \note A NULL pointer will be returned and no error message will be printed if the training api
  ///    * is not supported with this build. A NULL pointer will be returned and an error message will be
  ///    * printed if the provided version is unsupported, for example when using a runtime older than the
  ///    * version created with this header file.
  ///    *
  ///    * \param[in] version Must be ::ORT_API_VERSION
  ///    * \return The ::OrtTrainingApi struct for the version requested.
  ///    *
  ///    * \since Version 1.13
  ///    */
  external ffi.Pointer<
          ffi.NativeFunction<
              ffi.Pointer<OrtTrainingApi> Function(ffi.Uint32 version)>>
      GetTrainingApi;

  external ffi.Pointer<
          ffi.NativeFunction<
              OrtStatusPtr Function(ffi.Pointer<OrtSessionOptions> options,
                  ffi.Pointer<OrtCANNProviderOptions> cann_options)>>
      SessionOptionsAppendExecutionProvider_CANN;

  external ffi.Pointer<
          ffi.NativeFunction<
              OrtStatusPtr Function(
                  ffi.Pointer<ffi.Pointer<OrtCANNProviderOptions>> out)>>
      CreateCANNProviderOptions;

  external ffi.Pointer<
      ffi.NativeFunction<
          OrtStatusPtr Function(
              ffi.Pointer<OrtCANNProviderOptions> cann_options,
              ffi.Pointer<ffi.Pointer<ffi.Char>> provider_options_keys,
              ffi.Pointer<ffi.Pointer<ffi.Char>> provider_options_values,
              ffi.Size num_keys)>> UpdateCANNProviderOptions;

  external ffi.Pointer<
          ffi.NativeFunction<
              OrtStatusPtr Function(
                  ffi.Pointer<OrtCANNProviderOptions> cann_options,
                  ffi.Pointer<OrtAllocator> allocator,
                  ffi.Pointer<ffi.Pointer<ffi.Char>> ptr)>>
      GetCANNProviderOptionsAsString;

  /// \brief Release an OrtCANNProviderOptions
  ///
  /// \param[in] input The pointer of OrtCANNProviderOptions which will been deleted
  ///
  /// \since Version 1.13.
  external ffi.Pointer<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<OrtCANNProviderOptions> input)>>
      ReleaseCANNProviderOptions;

  /// \brief Get OrtDevice type from MemoryInfo
  ///
  /// \since Version 1.14
  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<OrtMemoryInfo> ptr,
              ffi.Pointer<ffi.UnsignedInt> out)>> MemoryInfoGetDeviceType;

  external ffi.Pointer<
      ffi.NativeFunction<
          OrtStatusPtr Function(ffi.Pointer<OrtEnv> ort_env,
              ffi.UnsignedInt log_severity_level)>> UpdateEnvWithCustomLogLevel;

  external ffi.Pointer<
          ffi.NativeFunction<
              OrtStatusPtr Function(ffi.Pointer<OrtThreadingOptions> tp_options,
                  ffi.Pointer<ffi.Char> affinity_string)>>
      SetGlobalIntraOpThreadAffinity;

  external ffi.Pointer<
      ffi.NativeFunction<
          OrtStatusPtr Function(ffi.Pointer<OrtSessionOptions> options,
              ffi.Pointer<ffi.Char> library_name)>> RegisterCustomOpsLibrary_V2;

  external ffi.Pointer<
          ffi.NativeFunction<
              OrtStatusPtr Function(ffi.Pointer<OrtSessionOptions> options,
                  ffi.Pointer<ffi.Char> registration_func_name)>>
      RegisterCustomOpsUsingFunction;

  external ffi.Pointer<
          ffi.NativeFunction<
              OrtStatusPtr Function(
                  ffi.Pointer<OrtKernelInfo> info, ffi.Pointer<ffi.Size> out)>>
      KernelInfo_GetInputCount;

  external ffi.Pointer<
          ffi.NativeFunction<
              OrtStatusPtr Function(
                  ffi.Pointer<OrtKernelInfo> info, ffi.Pointer<ffi.Size> out)>>
      KernelInfo_GetOutputCount;

  external ffi.Pointer<
      ffi.NativeFunction<
          OrtStatusPtr Function(
              ffi.Pointer<OrtKernelInfo> info,
              ffi.Size index,
              ffi.Pointer<ffi.Char> out,
              ffi.Pointer<ffi.Size> size)>> KernelInfo_GetInputName;

  external ffi.Pointer<
      ffi.NativeFunction<
          OrtStatusPtr Function(
              ffi.Pointer<OrtKernelInfo> info,
              ffi.Size index,
              ffi.Pointer<ffi.Char> out,
              ffi.Pointer<ffi.Size> size)>> KernelInfo_GetOutputName;

  external ffi.Pointer<
          ffi.NativeFunction<
              OrtStatusPtr Function(
                  ffi.Pointer<OrtKernelInfo> info,
                  ffi.Size index,
                  ffi.Pointer<ffi.Pointer<OrtTypeInfo>> type_info)>>
      KernelInfo_GetInputTypeInfo;

  external ffi.Pointer<
          ffi.NativeFunction<
              OrtStatusPtr Function(
                  ffi.Pointer<OrtKernelInfo> info,
                  ffi.Size index,
                  ffi.Pointer<ffi.Pointer<OrtTypeInfo>> type_info)>>
      KernelInfo_GetOutputTypeInfo;

  external ffi.Pointer<
          ffi.NativeFunction<
              OrtStatusPtr Function(
                  ffi.Pointer<OrtKernelInfo> info,
                  ffi.Pointer<ffi.Char> name,
                  ffi.Pointer<OrtAllocator> allocator,
                  ffi.Pointer<ffi.Pointer<OrtValue>> out)>>
      KernelInfoGetAttribute_tensor;

  external ffi.Pointer<
      ffi.NativeFunction<
          OrtStatusPtr Function(
              ffi.Pointer<OrtSessionOptions> options,
              ffi.Pointer<ffi.Char> config_key,
              ffi.Pointer<ffi.Int> out)>> HasSessionConfigEntry;

  external ffi.Pointer<
      ffi.NativeFunction<
          OrtStatusPtr Function(
              ffi.Pointer<OrtSessionOptions> options,
              ffi.Pointer<ffi.Char> config_key,
              ffi.Pointer<ffi.Char> config_value,
              ffi.Pointer<ffi.Size> size)>> GetSessionConfigEntry;

  external ffi.Pointer<
          ffi.NativeFunction<
              OrtStatusPtr Function(ffi.Pointer<OrtSessionOptions> options,
                  ffi.Pointer<OrtDnnlProviderOptions> dnnl_options)>>
      SessionOptionsAppendExecutionProvider_Dnnl;

  external ffi.Pointer<
          ffi.NativeFunction<
              OrtStatusPtr Function(
                  ffi.Pointer<ffi.Pointer<OrtDnnlProviderOptions>> out)>>
      CreateDnnlProviderOptions;

  external ffi.Pointer<
      ffi.NativeFunction<
          OrtStatusPtr Function(
              ffi.Pointer<OrtDnnlProviderOptions> dnnl_options,
              ffi.Pointer<ffi.Pointer<ffi.Char>> provider_options_keys,
              ffi.Pointer<ffi.Pointer<ffi.Char>> provider_options_values,
              ffi.Size num_keys)>> UpdateDnnlProviderOptions;

  external ffi.Pointer<
          ffi.NativeFunction<
              OrtStatusPtr Function(
                  ffi.Pointer<OrtDnnlProviderOptions> dnnl_options,
                  ffi.Pointer<OrtAllocator> allocator,
                  ffi.Pointer<ffi.Pointer<ffi.Char>> ptr)>>
      GetDnnlProviderOptionsAsString;

  /// \brief Release an ::OrtDnnlProviderOptions
  ///
  /// \since Version 1.15.
  external ffi.Pointer<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<OrtDnnlProviderOptions> input)>>
      ReleaseDnnlProviderOptions;

  external ffi.Pointer<
      ffi.NativeFunction<
          OrtStatusPtr Function(
              ffi.Pointer<OrtKernelInfo> info,
              ffi.Pointer<ffi.Char> out,
              ffi.Pointer<ffi.Size> size)>> KernelInfo_GetNodeName;

  external ffi.Pointer<
          ffi.NativeFunction<
              OrtStatusPtr Function(ffi.Pointer<OrtKernelInfo> info,
                  ffi.Pointer<ffi.Pointer<OrtLogger>> logger)>>
      KernelInfo_GetLogger;

  external ffi.Pointer<
          ffi.NativeFunction<
              OrtStatusPtr Function(ffi.Pointer<OrtKernelContext> context,
                  ffi.Pointer<ffi.Pointer<OrtLogger>> logger)>>
      KernelContext_GetLogger;

  external ffi.Pointer<
      ffi.NativeFunction<
          OrtStatusPtr Function(
              ffi.Pointer<OrtLogger> logger,
              ffi.UnsignedInt log_severity_level,
              ffi.Pointer<ffi.Char> message,
              ffi.Pointer<ffi.Char> file_path,
              ffi.Int line_number,
              ffi.Pointer<ffi.Char> func_name)>> Logger_LogMessage;

  external ffi.Pointer<
          ffi.NativeFunction<
              OrtStatusPtr Function(ffi.Pointer<OrtLogger> logger,
                  ffi.Pointer<ffi.UnsignedInt> out)>>
      Logger_GetLoggingSeverityLevel;

  external ffi.Pointer<
          ffi.NativeFunction<
              OrtStatusPtr Function(
                  ffi.Pointer<OrtKernelInfo> info,
                  ffi.Size index,
                  ffi.Pointer<ffi.Int> is_constant,
                  ffi.Pointer<ffi.Pointer<OrtValue>> out)>>
      KernelInfoGetConstantInput_tensor;

  external ffi.Pointer<
          ffi.NativeFunction<
              OrtStatusPtr Function(ffi.Pointer<OrtTypeInfo> type_info,
                  ffi.Pointer<ffi.Pointer<OrtOptionalTypeInfo>> out)>>
      CastTypeInfoToOptionalTypeInfo;

  external ffi.Pointer<
          ffi.NativeFunction<
              OrtStatusPtr Function(
                  ffi.Pointer<OrtOptionalTypeInfo> optional_type_info,
                  ffi.Pointer<ffi.Pointer<OrtTypeInfo>> out)>>
      GetOptionalContainedTypeInfo;

  external ffi.Pointer<
          ffi.NativeFunction<
              OrtStatusPtr Function(
                  ffi.Pointer<OrtValue> value,
                  ffi.Size index,
                  ffi.Size length_in_bytes,
                  ffi.Pointer<ffi.Pointer<ffi.Char>> buffer)>>
      GetResizedStringTensorElementBuffer;

  external ffi.Pointer<
          ffi.NativeFunction<
              OrtStatusPtr Function(
                  ffi.Pointer<OrtKernelContext> context,
                  ffi.Pointer<OrtMemoryInfo> mem_info,
                  ffi.Pointer<ffi.Pointer<OrtAllocator>> out)>>
      KernelContext_GetAllocator;

  /// \brief Returns a null terminated string of the build info including git info and cxx flags
  ///
  /// \return UTF-8 encoded version string. Do not deallocate the returned buffer.
  ///
  /// \since Version 1.15.
  external ffi.Pointer<ffi.NativeFunction<ffi.Pointer<ffi.Char> Function()>>
      GetBuildInfoString;

  external ffi.Pointer<
          ffi.NativeFunction<
              OrtStatusPtr Function(
                  ffi.Pointer<ffi.Pointer<OrtROCMProviderOptions>> out)>>
      CreateROCMProviderOptions;

  external ffi.Pointer<
      ffi.NativeFunction<
          OrtStatusPtr Function(
              ffi.Pointer<OrtROCMProviderOptions> rocm_options,
              ffi.Pointer<ffi.Pointer<ffi.Char>> provider_options_keys,
              ffi.Pointer<ffi.Pointer<ffi.Char>> provider_options_values,
              ffi.Size num_keys)>> UpdateROCMProviderOptions;

  external ffi.Pointer<
          ffi.NativeFunction<
              OrtStatusPtr Function(
                  ffi.Pointer<OrtROCMProviderOptions> rocm_options,
                  ffi.Pointer<OrtAllocator> allocator,
                  ffi.Pointer<ffi.Pointer<ffi.Char>> ptr)>>
      GetROCMProviderOptionsAsString;

  /// \brief Release an ::OrtROCMProviderOptions
  ///
  /// \note This is an exception in the naming convention of other Release* functions, as the name of the method does not have the V2 suffix, but the type does
  ///
  /// \since Version 1.16.
  external ffi.Pointer<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<OrtROCMProviderOptions> input)>>
      ReleaseROCMProviderOptions;

  external ffi.Pointer<
      ffi.NativeFunction<
          OrtStatusPtr Function(
              ffi.Pointer<OrtEnv> env,
              ffi.Pointer<ffi.Char> provider_type,
              ffi.Pointer<OrtMemoryInfo> mem_info,
              ffi.Pointer<OrtArenaCfg> arena_cfg,
              ffi.Pointer<ffi.Pointer<ffi.Char>> provider_options_keys,
              ffi.Pointer<ffi.Pointer<ffi.Char>> provider_options_values,
              ffi.Size num_keys)>> CreateAndRegisterAllocatorV2;

  external ffi.Pointer<
      ffi.NativeFunction<
          OrtStatusPtr Function(
              ffi.Pointer<OrtSession> session,
              ffi.Pointer<OrtRunOptions> run_options,
              ffi.Pointer<ffi.Pointer<ffi.Char>> input_names,
              ffi.Pointer<ffi.Pointer<OrtValue>> input,
              ffi.Size input_len,
              ffi.Pointer<ffi.Pointer<ffi.Char>> output_names,
              ffi.Size output_names_len,
              ffi.Pointer<ffi.Pointer<OrtValue>> output,
              RunAsyncCallbackFn run_async_callback,
              ffi.Pointer<ffi.Void> user_data)>> RunAsync;

  external ffi.Pointer<
          ffi.NativeFunction<
              OrtStatusPtr Function(
                  ffi.Pointer<OrtTensorRTProviderOptionsV2> tensorrt_options,
                  ffi.Pointer<ffi.Char> key,
                  ffi.Pointer<ffi.Void> value)>>
      UpdateTensorRTProviderOptionsWithValue;

  external ffi.Pointer<
          ffi.NativeFunction<
              OrtStatusPtr Function(
                  ffi.Pointer<OrtTensorRTProviderOptionsV2> tensorrt_options,
                  ffi.Pointer<ffi.Char> key,
                  ffi.Pointer<ffi.Pointer<ffi.Void>> ptr)>>
      GetTensorRTProviderOptionsByName;

  external ffi.Pointer<
      ffi.NativeFunction<
          OrtStatusPtr Function(
              ffi.Pointer<OrtCUDAProviderOptionsV2> cuda_options,
              ffi.Pointer<ffi.Char> key,
              ffi.Pointer<ffi.Void> value)>> UpdateCUDAProviderOptionsWithValue;

  external ffi.Pointer<
          ffi.NativeFunction<
              OrtStatusPtr Function(
                  ffi.Pointer<OrtCUDAProviderOptionsV2> cuda_options,
                  ffi.Pointer<ffi.Char> key,
                  ffi.Pointer<ffi.Pointer<ffi.Void>> ptr)>>
      GetCUDAProviderOptionsByName;

  external ffi.Pointer<
          ffi.NativeFunction<
              OrtStatusPtr Function(
                  ffi.Pointer<OrtKernelContext> context,
                  ffi.Int resource_version,
                  ffi.Int resource_id,
                  ffi.Pointer<ffi.Pointer<ffi.Void>> resource)>>
      KernelContext_GetResource;

  external ffi.Pointer<
          ffi.NativeFunction<
              OrtStatusPtr Function(
                  ffi.Pointer<OrtSessionOptions> options,
                  OrtLoggingFunction user_logging_function,
                  ffi.Pointer<ffi.Void> user_logging_param)>>
      SetUserLoggingFunction;

  external ffi.Pointer<
      ffi.NativeFunction<
          OrtStatusPtr Function(ffi.Pointer<OrtShapeInferContext> context,
              ffi.Pointer<ffi.Size> out)>> ShapeInferContext_GetInputCount;

  external ffi.Pointer<
          ffi.NativeFunction<
              OrtStatusPtr Function(
                  ffi.Pointer<OrtShapeInferContext> context,
                  ffi.Size index,
                  ffi.Pointer<ffi.Pointer<OrtTensorTypeAndShapeInfo>> info)>>
      ShapeInferContext_GetInputTypeShape;

  external ffi.Pointer<
          ffi.NativeFunction<
              OrtStatusPtr Function(
                  ffi.Pointer<OrtShapeInferContext> context,
                  ffi.Pointer<ffi.Char> attr_name,
                  ffi.Pointer<ffi.Pointer<OrtOpAttr>> attr)>>
      ShapeInferContext_GetAttribute;

  external ffi.Pointer<
          ffi.NativeFunction<
              OrtStatusPtr Function(ffi.Pointer<OrtShapeInferContext> context,
                  ffi.Size index, ffi.Pointer<OrtTensorTypeAndShapeInfo> info)>>
      ShapeInferContext_SetOutputTypeShape;

  external ffi.Pointer<
      ffi.NativeFunction<
          OrtStatusPtr Function(
              ffi.Pointer<OrtTensorTypeAndShapeInfo> info,
              ffi.Pointer<ffi.Pointer<ffi.Char>> dim_params,
              ffi.Size dim_params_length)>> SetSymbolicDimensions;

  external ffi.Pointer<
      ffi.NativeFunction<
          OrtStatusPtr Function(
              ffi.Pointer<OrtOpAttr> op_attr,
              ffi.UnsignedInt type,
              ffi.Pointer<ffi.Void> data,
              ffi.Size len,
              ffi.Pointer<ffi.Size> out)>> ReadOpAttr;

  external ffi.Pointer<
          ffi.NativeFunction<
              OrtStatusPtr Function(
                  ffi.Pointer<OrtSessionOptions> options, ffi.Bool value)>>
      SetDeterministicCompute;

  external ffi.Pointer<
      ffi.NativeFunction<
          OrtStatusPtr Function(
              ffi.Pointer<OrtKernelContext> context,
              ffi.Pointer<
                      ffi.NativeFunction<
                          ffi.Void Function(ffi.Pointer<ffi.Void>, ffi.Size)>>
                  fn,
              ffi.Size total,
              ffi.Size num_batch,
              ffi.Pointer<ffi.Void> usr_data)>> KernelContext_ParallelFor;

  external ffi.Pointer<
          ffi.NativeFunction<
              OrtStatusPtr Function(
                  ffi.Pointer<OrtSessionOptions> options,
                  ffi.Pointer<ffi.Pointer<ffi.Char>> provider_options_keys,
                  ffi.Pointer<ffi.Pointer<ffi.Char>> provider_options_values,
                  ffi.Size num_keys)>>
      SessionOptionsAppendExecutionProvider_OpenVINO_V2;

  external ffi.Pointer<
          ffi.NativeFunction<
              OrtStatusPtr Function(
                  ffi.Pointer<OrtSessionOptions> options,
                  ffi.Pointer<ffi.Pointer<ffi.Char>> provider_options_keys,
                  ffi.Pointer<ffi.Pointer<ffi.Char>> provider_options_values,
                  ffi.Size num_keys)>>
      SessionOptionsAppendExecutionProvider_VitisAI;

  external ffi.Pointer<
          ffi.NativeFunction<
              OrtStatusPtr Function(
                  ffi.Pointer<OrtKernelContext> context,
                  ffi.Pointer<OrtMemoryInfo> mem_info,
                  ffi.Size count_or_bytes,
                  ffi.Pointer<ffi.Pointer<ffi.Void>> out)>>
      KernelContext_GetScratchBuffer;

  external ffi.Pointer<
          ffi.NativeFunction<
              OrtStatusPtr Function(
                  ffi.Pointer<OrtKernelInfo> info,
                  ffi.Int mem_type,
                  ffi.Pointer<ffi.Pointer<OrtAllocator>> out)>>
      KernelInfoGetAllocator;

  external ffi.Pointer<
          ffi.NativeFunction<
              OrtStatusPtr Function(
                  ffi.Pointer<OrtSessionOptions> options,
                  ffi.Pointer<ffi.Pointer<ffi.Char>>
                      external_initializer_file_names,
                  ffi.Pointer<ffi.Pointer<ffi.Char>>
                      external_initializer_file_buffer_array,
                  ffi.Pointer<ffi.Size> external_initializer_file_lengths,
                  ffi.Size num_external_initializer_files)>>
      AddExternalInitializersFromFilesInMemory;

  external ffi.Pointer<
      ffi.NativeFunction<
          OrtStatusPtr Function(
              ffi.Pointer<ffi.Char> adapter_file_path,
              ffi.Pointer<OrtAllocator> allocator,
              ffi.Pointer<ffi.Pointer<OrtLoraAdapter>> out)>> CreateLoraAdapter;

  external ffi.Pointer<
          ffi.NativeFunction<
              OrtStatusPtr Function(
                  ffi.Pointer<ffi.Void> bytes,
                  ffi.Size num_bytes,
                  ffi.Pointer<OrtAllocator> allocator,
                  ffi.Pointer<ffi.Pointer<OrtLoraAdapter>> out)>>
      CreateLoraAdapterFromArray;

  external ffi.Pointer<
          ffi
          .NativeFunction<ffi.Void Function(ffi.Pointer<OrtLoraAdapter> input)>>
      ReleaseLoraAdapter;

  external ffi.Pointer<
          ffi.NativeFunction<
              OrtStatusPtr Function(ffi.Pointer<OrtRunOptions> options,
                  ffi.Pointer<OrtLoraAdapter> adapter)>>
      RunOptionsAddActiveLoraAdapter;

  external ffi.Pointer<
      ffi.NativeFunction<
          OrtStatusPtr Function(
              ffi.Pointer<OrtSession> sess,
              ffi.Pointer<ffi.Pointer<ffi.Char>> keys,
              ffi.Pointer<ffi.Pointer<ffi.Char>> values,
              ffi.Size kv_len)>> SetEpDynamicOptions;

  external ffi.Pointer<
          ffi
          .NativeFunction<ffi.Void Function(ffi.Pointer<OrtValueInfo> input)>>
      ReleaseValueInfo;

  external ffi.Pointer<
          ffi.NativeFunction<ffi.Void Function(ffi.Pointer<OrtNode> input)>>
      ReleaseNode;

  external ffi.Pointer<
          ffi.NativeFunction<ffi.Void Function(ffi.Pointer<OrtGraph> input)>>
      ReleaseGraph;

  external ffi.Pointer<
          ffi.NativeFunction<ffi.Void Function(ffi.Pointer<OrtModel> input)>>
      ReleaseModel;

  external ffi.Pointer<
      ffi.NativeFunction<
          OrtStatusPtr Function(ffi.Pointer<OrtValueInfo> value_info,
              ffi.Pointer<ffi.Pointer<ffi.Char>> name)>> GetValueInfoName;

  external ffi.Pointer<
          ffi.NativeFunction<
              OrtStatusPtr Function(ffi.Pointer<OrtValueInfo> value_info,
                  ffi.Pointer<ffi.Pointer<OrtTypeInfo>> type_info)>>
      GetValueInfoTypeInfo;

  /// \brief Get the Model Editor API instance
  ///
  /// Get the Model Editor API instance to create a new model or augment an existing model.
  ///
  /// \return Model Editor API struct
  ///
  /// \since Version 1.22.
  external ffi
      .Pointer<ffi.NativeFunction<ffi.Pointer<OrtModelEditorApi> Function()>>
      GetModelEditorApi;

  external ffi.Pointer<
          ffi.NativeFunction<
              OrtStatusPtr Function(
                  ffi.Pointer<OrtAllocator> deleter,
                  ffi.Pointer<ffi.Void> p_data,
                  ffi.Size p_data_len,
                  ffi.Pointer<ffi.Int64> shape,
                  ffi.Size shape_len,
                  ffi.UnsignedInt type,
                  ffi.Pointer<ffi.Pointer<OrtValue>> out)>>
      CreateTensorWithDataAndDeleterAsOrtValue;

  external ffi.Pointer<
          ffi.NativeFunction<
              OrtStatusPtr Function(
                  ffi.Pointer<OrtSessionOptions> options, ffi.Bool cancel)>>
      SessionOptionsSetLoadCancellationFlag;

  /// \brief Get the Compile API instance.
  ///
  /// Get the Compile API instance to compile ONNX models. Execution providers that support compilation fuse a subgraph
  /// into an EPContext node that wraps a provider-specific binary representation of the subgraph.
  /// For more details about the EPContext design, refer to:
  /// \htmlonly
  /// <a href="https://onnxruntime.ai/docs/execution-providers/EP-Context-Design.html">EPContext design document.</a>
  /// \endhtmlonly
  ///
  /// \return Compile API struct instance.
  ///
  /// \since Version 1.22.
  external ffi
      .Pointer<ffi.NativeFunction<ffi.Pointer<OrtCompileApi> Function()>>
      GetCompileApi;

  /// \brief Create an OrtKeyValuePairs instance.
  ///
  /// \param[out] out A pointer to a newly created OrtKeyValuePairs instance.
  ///
  /// \note Must be released by calling ReleaseKeyValuePairs.
  ///
  /// \since Version 1.22.
  external ffi.Pointer<
          ffi.NativeFunction<
              ffi.Void Function(
                  ffi.Pointer<ffi.Pointer<OrtKeyValuePairs>> out)>>
      CreateKeyValuePairs;

  /// \brief Add a key-value pair to the OrtKeyValuePairs instance.
  ///
  /// \param[in] kvps OrtKeyValuePairs instance.
  /// \param[in] key Key to be added.
  /// \param[in] value Value to be added.
  ///
  /// \note The `key` and `value` are copied internally.
  ///
  /// \since Version 1.22.
  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<OrtKeyValuePairs> kvps,
              ffi.Pointer<ffi.Char> key,
              ffi.Pointer<ffi.Char> value)>> AddKeyValuePair;

  /// \brief Get the value associated with a key in the OrtKeyValuePairs instance.
  ///
  /// \param[in] kvps OrtKeyValuePairs instance.
  /// \param[in] key Key to be searched.
  ///
  /// \return The value associated with the key, or nullptr if the key does not exist.
  ///
  /// \since Version 1.22.
  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Pointer<OrtKeyValuePairs> kvps,
              ffi.Pointer<ffi.Char> key)>> GetKeyValue;

  /// \brief Get all the key-value pairs from the OrtKeyValuePairs instance.
  ///
  /// \param[in] kvps OrtKeyValuePairs instance.
  /// \param[out] keys Array of keys from `kvps`.
  /// \param[out] values Array of values from `kvps`.
  /// \param[out] num_entries Number of entries in `keys` and `values`.
  ///
  /// \since Version 1.22.
  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<OrtKeyValuePairs> kvps,
              ffi.Pointer<ffi.Pointer<ffi.Pointer<ffi.Char>>> keys,
              ffi.Pointer<ffi.Pointer<ffi.Pointer<ffi.Char>>> values,
              ffi.Pointer<ffi.Size> num_entries)>> GetKeyValuePairs;

  /// \brief Remove a key-value pair from the OrtKeyValuePairs instance.
  ///
  /// \param[in] kvps OrtKeyValuePairs instance.
  /// \param[in] key Key to be removed. No error if not found.
  ///
  /// \since Version 1.22.
  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<OrtKeyValuePairs> kvps,
              ffi.Pointer<ffi.Char> key)>> RemoveKeyValuePair;

  external ffi.Pointer<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<OrtKeyValuePairs> input)>>
      ReleaseKeyValuePairs;

  external ffi.Pointer<
      ffi.NativeFunction<
          OrtStatusPtr Function(
              ffi.Pointer<OrtEnv> env,
              ffi.Pointer<ffi.Char> registration_name,
              ffi.Pointer<ffi.Char> path)>> RegisterExecutionProviderLibrary;

  external ffi.Pointer<
          ffi.NativeFunction<
              OrtStatusPtr Function(ffi.Pointer<OrtEnv> env,
                  ffi.Pointer<ffi.Char> registration_name)>>
      UnregisterExecutionProviderLibrary;

  external ffi.Pointer<
      ffi.NativeFunction<
          OrtStatusPtr Function(
              ffi.Pointer<OrtEnv> env,
              ffi.Pointer<ffi.Pointer<ffi.Pointer<OrtEpDevice>>> ep_devices,
              ffi.Pointer<ffi.Size> num_ep_devices)>> GetEpDevices;

  external ffi.Pointer<
          ffi.NativeFunction<
              OrtStatusPtr Function(
                  ffi.Pointer<OrtSessionOptions> session_options,
                  ffi.Pointer<OrtEnv> env,
                  ffi.Pointer<ffi.Pointer<OrtEpDevice>> ep_devices,
                  ffi.Size num_ep_devices,
                  ffi.Pointer<ffi.Pointer<ffi.Char>> ep_option_keys,
                  ffi.Pointer<ffi.Pointer<ffi.Char>> ep_option_vals,
                  ffi.Size num_ep_options)>>
      SessionOptionsAppendExecutionProvider_V2;

  external ffi.Pointer<
      ffi.NativeFunction<
          OrtStatusPtr Function(ffi.Pointer<OrtSessionOptions> session_options,
              ffi.UnsignedInt policy)>> SessionOptionsSetEpSelectionPolicy;

  external ffi.Pointer<
          ffi.NativeFunction<
              OrtStatusPtr Function(
                  ffi.Pointer<OrtSessionOptions> session_options,
                  EpSelectionDelegate delegate,
                  ffi.Pointer<ffi.Void> delegate_state)>>
      SessionOptionsSetEpSelectionPolicyDelegate;

  /// \brief Get the hardware device type.
  ///
  /// \param[in] device The OrtHardwareDevice instance to query.
  /// \return The hardware device type.
  ///
  /// \since Version 1.22.
  external ffi.Pointer<
          ffi.NativeFunction<
              ffi.UnsignedInt Function(ffi.Pointer<OrtHardwareDevice> device)>>
      HardwareDevice_Type;

  /// \brief Get the hardware device's vendor identifier.
  ///
  /// \param[in] device The OrtHardwareDevice instance to query.
  /// \return The hardware device vendor identifier.
  ///
  /// \since Version 1.22.
  external ffi.Pointer<
          ffi.NativeFunction<
              ffi.Uint32 Function(ffi.Pointer<OrtHardwareDevice> device)>>
      HardwareDevice_VendorId;

  /// \brief Get the hardware device's vendor name.
  ///
  /// \param[in] device The OrtHardwareDevice instance to query.
  /// \return The hardware device's vendor name.
  ///
  /// \since Version 1.22.
  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<OrtHardwareDevice> device)>> HardwareDevice_Vendor;

  /// \brief Get the hardware device's unique identifier.
  ///
  /// \param[in] device The OrtHardwareDevice instance to query.
  /// \return The device id.
  ///
  /// \note This is not a unique identifier. It identifies the hardware type when combined with vendor id.
  /// \since Version 1.22.
  external ffi.Pointer<
          ffi.NativeFunction<
              ffi.Uint32 Function(ffi.Pointer<OrtHardwareDevice> device)>>
      HardwareDevice_DeviceId;

  /// \brief Get hardware device metadata.
  ///
  /// \param[in] device The OrtHardwareDevice instance to query.
  /// \return An OrtKeyValuePairs instance containing the metadata for the device.
  /// Note: ORT owns the instance so the user must not call ReleaseKeyValuePairs with it.
  ///
  /// \since Version 1.22.
  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Pointer<OrtKeyValuePairs> Function(
              ffi.Pointer<OrtHardwareDevice> device)>> HardwareDevice_Metadata;

  /// \brief Get the execution provider name.
  ///
  /// \param[in] ep_device The OrtEpDevice instance to query.
  /// \return The execution provider name.
  ///
  /// \since Version 1.22.
  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<OrtEpDevice> ep_device)>> EpDevice_EpName;

  /// \brief Get the execution provider's vendor name.
  ///
  /// \param[in] ep_device The OrtEpDevice instance to query.
  /// \return The execution provider's vendor name.
  ///
  /// \since Version 1.22.
  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<OrtEpDevice> ep_device)>> EpDevice_EpVendor;

  /// \brief Get the metadata for the OrtEpDevice.
  ///
  /// \param[in] ep_device The OrtEpDevice instance to query.
  /// \return An OrtKeyValuePairs instance containing the metadata for the device.
  ///
  /// \since Version 1.22.
  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Pointer<OrtKeyValuePairs> Function(
              ffi.Pointer<OrtEpDevice> ep_device)>> EpDevice_EpMetadata;

  /// \brief Get the execution provider options for the OrtEpDevice.
  ///
  /// \param[in] ep_device The OrtEpDevice instance to query.
  /// \return An OrtKeyValuePairs instance containing the execution provider options for the device.
  ///
  /// \since Version 1.22.
  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Pointer<OrtKeyValuePairs> Function(
              ffi.Pointer<OrtEpDevice> ep_device)>> EpDevice_EpOptions;

  /// \brief Get the OrtHardwareDevice instance for the OrtEpDevice.
  ///
  /// \param[in] ep_device The OrtEpDevice instance to query.
  /// \return The OrtHardwareDevice instance for the device.
  ///
  /// \since Version 1.22.
  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Pointer<OrtHardwareDevice> Function(
              ffi.Pointer<OrtEpDevice> ep_device)>> EpDevice_Device;

  /// \brief Get the OrtEpApi instance for implementing an execution provider.
  ///
  /// \since Version 1.22.
  external ffi.Pointer<ffi.NativeFunction<ffi.Pointer<OrtEpApi> Function()>>
      GetEpApi;
}

/// Specifies some characteristics of inputs/outputs of custom ops:
/// Specify if the inputs/outputs are one of:
/// 1) Non-optional (input/output must be present in the node)
/// 2) Optional (input/output may be absent in the node)
/// 3) Variadic: A variadic input or output specifies N (i.e., the minimum arity) or more operands.
/// Only the last input or output of a custom op may be marked as variadic.
/// The homogeneity of the variadic input or output determines whether all operands must be of the same
/// tensor element type.
enum OrtCustomOpInputOutputCharacteristic {
  INPUT_OUTPUT_REQUIRED(0),
  INPUT_OUTPUT_OPTIONAL(1),
  INPUT_OUTPUT_VARIADIC(2);

  final int value;
  const OrtCustomOpInputOutputCharacteristic(this.value);

  static OrtCustomOpInputOutputCharacteristic fromValue(int value) =>
      switch (value) {
        0 => INPUT_OUTPUT_REQUIRED,
        1 => INPUT_OUTPUT_OPTIONAL,
        2 => INPUT_OUTPUT_VARIADIC,
        _ => throw ArgumentError(
            'Unknown value for OrtCustomOpInputOutputCharacteristic: $value'),
      };
}

/// The OrtCustomOp structure defines a custom op's schema and its kernel callbacks. The callbacks are filled in by
/// the implementor of the custom op.
final class OrtCustomOp extends ffi.Struct {
  /// Must be initialized to ORT_API_VERSION
  @ffi.Uint32()
  external int version;

  /// This callback creates the kernel, which is a user defined
  /// parameter that is passed to the Kernel* callbacks below. It is
  /// recommended to use CreateKernelV2 which allows for a safe error
  /// propagation by returning an OrtStatusPtr.
  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(
              ffi.Pointer<OrtCustomOp> op,
              ffi.Pointer<OrtApi> api,
              ffi.Pointer<OrtKernelInfo> info)>> CreateKernel;

  /// Returns the name of the op
  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Pointer<OrtCustomOp> op)>> GetName;

  /// Returns the type of the execution provider, return nullptr to use CPU execution provider
  external ffi.Pointer<
          ffi.NativeFunction<
              ffi.Pointer<ffi.Char> Function(ffi.Pointer<OrtCustomOp> op)>>
      GetExecutionProviderType;

  /// Returns the count and types of the input & output tensors
  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.UnsignedInt Function(
              ffi.Pointer<OrtCustomOp> op, ffi.Size index)>> GetInputType;

  external ffi.Pointer<
          ffi.NativeFunction<ffi.Size Function(ffi.Pointer<OrtCustomOp> op)>>
      GetInputTypeCount;

  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.UnsignedInt Function(
              ffi.Pointer<OrtCustomOp> op, ffi.Size index)>> GetOutputType;

  external ffi.Pointer<
          ffi.NativeFunction<ffi.Size Function(ffi.Pointer<OrtCustomOp> op)>>
      GetOutputTypeCount;

  /// Perform a computation step.  It is recommended to use
  /// KernelComputeV2 which allows for a safe error propagation by
  /// returning an OrtStatusPtr.
  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Void> op_kernel,
              ffi.Pointer<OrtKernelContext> context)>> KernelCompute;

  external ffi.Pointer<
          ffi
          .NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Void> op_kernel)>>
      KernelDestroy;

  /// Returns the characteristics of the input & output tensors
  external ffi.Pointer<
          ffi.NativeFunction<
              ffi.UnsignedInt Function(
                  ffi.Pointer<OrtCustomOp> op, ffi.Size index)>>
      GetInputCharacteristic;

  external ffi.Pointer<
          ffi.NativeFunction<
              ffi.UnsignedInt Function(
                  ffi.Pointer<OrtCustomOp> op, ffi.Size index)>>
      GetOutputCharacteristic;

  /// Returns the memory type of the input tensors. This API allows the custom op
  /// to place the inputs on specific devices. By default, it returns
  /// OrtMemTypeDefault, which means the input is placed on the default device for
  /// the execution provider. If the inputs need to be with different memory tyeps,
  /// this function can be overridden to return the specific memory types.
  external ffi.Pointer<
          ffi.NativeFunction<
              ffi.Int Function(ffi.Pointer<OrtCustomOp> op, ffi.Size index)>>
      GetInputMemoryType;

  /// Returns the minimum number of input arguments expected for the variadic input.
  /// Applicable only for custom ops that have a variadic input.
  external ffi.Pointer<
          ffi.NativeFunction<ffi.Int Function(ffi.Pointer<OrtCustomOp> op)>>
      GetVariadicInputMinArity;

  /// Returns true (non-zero) if all arguments of a variadic input have to be of the same type (homogeneous),
  /// and false (zero) otherwise.
  /// Applicable only for custom ops that have a variadic input.
  external ffi.Pointer<
          ffi.NativeFunction<ffi.Int Function(ffi.Pointer<OrtCustomOp> op)>>
      GetVariadicInputHomogeneity;

  /// Returns the minimum number of output values expected for the variadic output.
  /// Applicable only for custom ops that have a variadic output.
  external ffi.Pointer<
          ffi.NativeFunction<ffi.Int Function(ffi.Pointer<OrtCustomOp> op)>>
      GetVariadicOutputMinArity;

  /// Returns true (non-zero) if all outputs values of a variadic output have to be of the same type (homogeneous),
  /// and false (zero) otherwise.
  /// Applicable only for custom ops that have a variadic output.
  external ffi.Pointer<
          ffi.NativeFunction<ffi.Int Function(ffi.Pointer<OrtCustomOp> op)>>
      GetVariadicOutputHomogeneity;

  /// Create the kernel state which is passed to each compute call.
  external ffi.Pointer<
      ffi.NativeFunction<
          OrtStatusPtr Function(
              ffi.Pointer<OrtCustomOp> op,
              ffi.Pointer<OrtApi> api,
              ffi.Pointer<OrtKernelInfo> info,
              ffi.Pointer<ffi.Pointer<ffi.Void>> kernel)>> CreateKernelV2;

  /// Perform the computation step.
  external ffi.Pointer<
      ffi.NativeFunction<
          OrtStatusPtr Function(ffi.Pointer<ffi.Void> op_kernel,
              ffi.Pointer<OrtKernelContext> context)>> KernelComputeV2;

  external ffi.Pointer<
          ffi.NativeFunction<
              OrtStatusPtr Function(
                  ffi.Pointer<OrtCustomOp>, ffi.Pointer<OrtShapeInferContext>)>>
      InferOutputShapeFn;

  /// Get start range
  external ffi.Pointer<
          ffi.NativeFunction<ffi.Int Function(ffi.Pointer<OrtCustomOp> op)>>
      GetStartVersion;

  external ffi.Pointer<
          ffi.NativeFunction<ffi.Int Function(ffi.Pointer<OrtCustomOp> op)>>
      GetEndVersion;

  /// Get the inplace_map that defines which output can reuse which input
  /// Callers will provide 2 raw int* and pass in their address, this function will fill these 2 arrays
  /// when return, output (*output_index)[i] may reuse the input (*input_index[i]).
  /// The return value is the size of these 2 arrays.
  /// Callers are responsible to delete these 2 arrays after use by calling OrtCustomOp::ReleaseMayInplace().
  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Size Function(ffi.Pointer<ffi.Pointer<ffi.Int>> input_index,
              ffi.Pointer<ffi.Pointer<ffi.Int>> output_index)>> GetMayInplace;

  /// Release the pointer input_index and output_index allocated from GetMayInplace() function.
  /// If GetMayInplace() is defined, this function MUST be defined as well.
  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Int> input_index,
              ffi.Pointer<ffi.Int> output_index)>> ReleaseMayInplace;

  /// Same as GetMayInplace() and ReleaseMayInplace()
  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Size Function(ffi.Pointer<ffi.Pointer<ffi.Int>> input_index,
              ffi.Pointer<ffi.Pointer<ffi.Int>> output_index)>> GetAliasMap;

  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Int> input_index,
              ffi.Pointer<ffi.Int> output_index)>> ReleaseAliasMap;
}

/// \brief The helper interface to get the right version of OrtApi
///
/// Get a pointer to this structure through ::OrtGetApiBase
final class OrtApiBase extends ffi.Struct {
  /// \brief Get a pointer to the requested version of the ::OrtApi
  ///
  /// \param[in] version Must be ::ORT_API_VERSION
  /// \return The ::OrtApi for the version requested, nullptr will be returned if this version is unsupported, for example when using a runtime
  /// older than the version created with this header file.
  ///
  /// One can call GetVersionString() to get the version of the Onnxruntime library for logging
  /// and error reporting purposes.
  external ffi.Pointer<
          ffi.NativeFunction<ffi.Pointer<OrtApi> Function(ffi.Uint32 version)>>
      GetApi;

  /// \brief Returns a null terminated string of the version of the Onnxruntime library (eg: "1.8.1")
  ///
  /// \return UTF-8 encoded version string. Do not deallocate the returned buffer.
  external ffi.Pointer<ffi.NativeFunction<ffi.Pointer<ffi.Char> Function()>>
      GetVersionString;
}

typedef RegisterCustomOpsFnFunction = ffi.Pointer<OrtStatus> Function(
    ffi.Pointer<OrtSessionOptions> options, ffi.Pointer<OrtApiBase> api);
typedef RegisterCustomOpsFn
    = ffi.Pointer<ffi.NativeFunction<RegisterCustomOpsFnFunction>>;
typedef CreateEpApiFactoriesFnFunction = ffi.Pointer<OrtStatus> Function(
    ffi.Pointer<ffi.Char> registered_name,
    ffi.Pointer<OrtApiBase> ort_api_base,
    ffi.Pointer<ffi.Pointer<OrtEpFactory>> factories,
    ffi.Size max_factories,
    ffi.Pointer<ffi.Size> num_factories);
typedef DartCreateEpApiFactoriesFnFunction = ffi.Pointer<OrtStatus> Function(
    ffi.Pointer<ffi.Char> registered_name,
    ffi.Pointer<OrtApiBase> ort_api_base,
    ffi.Pointer<ffi.Pointer<OrtEpFactory>> factories,
    int max_factories,
    ffi.Pointer<ffi.Size> num_factories);

/// \brief The function signature that ORT will call to create OrtEpFactory instances.
///
/// This must be available in a function called 'CreateEpFactories' in the execution provider library.
///
/// \param[in] registered_name The name the execution library is registered with by RegisterExecutionProviderLibrary
/// \param[in] ort_api_base The OrtApiBase instance that is used by the factory to get the OrtApi instance for the
/// version of ORT that the library was compiled against.
/// \param[in,out] factories The implementation should create and add OrtEpFactory instances to this
/// pre-allocated array.
/// i.e. usage is `factories[0] = new MyEpFactory();`
/// \param[in] max_factories The maximum number of OrtEpFactory instances that can be added to `factories`.
/// Current default is to allow 4 factories. This can be increased in the future if needed.
/// \param[out] num_factories The number of OrtEpFactory instances created by the factory and added to `factories`.
///
/// \snippet{doc} snippets.dox OrtStatus Return Value
///
/// \since Version 1.22.
typedef CreateEpApiFactoriesFn
    = ffi.Pointer<ffi.NativeFunction<CreateEpApiFactoriesFnFunction>>;
typedef ReleaseEpApiFactoryFnFunction = ffi.Pointer<OrtStatus> Function(
    ffi.Pointer<OrtEpFactory> factory$);

/// \brief The function signature that ORT will call to release an OrtEpFactory instance.
///
/// This must be available in a function called 'ReleaseEpFactory' in the execution provider library.
///
/// \param[in] factory The OrtEpFactory instance to release.
///
/// \snippet{doc} snippets.dox OrtStatus Return Value
///
/// \since Version 1.22.
typedef ReleaseEpApiFactoryFn
    = ffi.Pointer<ffi.NativeFunction<ReleaseEpApiFactoryFnFunction>>;

const int ORT_API_VERSION = 22;

const String ORT_FILE =
    '/var/folders/4k/r__sg_ks0y77dlhvcpn3kk240000gn/T/CAcgxv/temp_for_macros.hpp';
